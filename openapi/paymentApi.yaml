{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Payment API",
    "version" : "2.3.2"
  },
  "servers" : [ {
    "url" : "https://sandbox-security-uat.finzly.io/auth/realms/BANKOS.UAT.SANDBOX.CUSTOMER/protocol/openid-connect/token",
    "description" : "Authentication",
    "variables" : {
      "tenant" : {
        "description" : "Tenant",
        "default" : "sandbox"
      }
    }
  } ],
  "security" : [ {
    "oAuth2" : [ "roles" ]
  } ],
  "tags" : [ {
    "name" : "Payments",
    "description" : "Payments APIs enables third-parties, banks, and bank's downstream partners to initiate and manage payments for their customers.\n\nThe single payment API support the payment origination for the various payment rails such as ACH, FedWire, Instant Payments based on the speed preference.\n\nFollowing use cases helps you to understand the current payment capabilities exposed via Finzly Connect APIs.       \n\n1. Initiate Credit Payment (Payout)\n2. Initiate Debit Payment (Collection)\n3. Get Payment Details\n4. Search Payments\n5. Cancel a Payment\n6. Return a Payment\n7. Reverse a Payment\n8. Transfer (Book) Payment\n"
  }, {
    "name" : "Bulk Payment",
    "description" : "This feature allows customers to upload bulk payments and process them seamlessly. Following payment, rails are supported.\n  1. ACH - NACHA format\n  2. Wire\n  3. RTP\n  4. FedNow.      \n \n"
  }, {
    "name" : "Bank",
    "description" : "To fetch the bank info by routing number.\n"
  }, {
    "name" : "Positive Pay",
    "description" : "Postive Pay Rules APIs enable third-parties, bank's customers and downstream partners to define postive rules for ACH debits or Fedwire drawdown requests or RFP (Request For Pay) request.\n\nPostive Pay Exeption APIs enable users to approve or reject the exceptions identified by the postive pay rules engine.\n"
  } ],
  "paths" : {
    "/v1/payments/customers/{customerUID}/files/{fileType}" : {
      "post" : {
        "tags" : [ "Bulk Payment" ],
        "summary" : "To upload the payment file.",
        "description" : "This feature allows customers to upload bulk payments and process them seamlessly. Following payment, rails are supported. 1. ACH - NACHA format 2. Wire 3. RTP 4. FedNow",
        "operationId" : "bulkUpload",
        "parameters" : [ {
          "name" : "customerUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer unique Id."
          }
        }, {
          "name" : "fileType",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "File type. Possible values are csv/fedwire/rtp/ach."
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/files_fileType_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "bulk payment file",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkPaymentResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successfully processed request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkPaymentResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter environment"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "405" : {
            "description" : "bad input parameter environment"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v1/banks/{routingNumber}" : {
      "get" : {
        "tags" : [ "Bank" ],
        "summary" : "To fetch the bank information.",
        "description" : "To fetch the bank details based on bank routing number.",
        "operationId" : "fetchBankInfo",
        "parameters" : [ {
          "name" : "routingNumber",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Bank routing number."
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BankApiResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successfully processed request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BankApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter environment"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "405" : {
            "description" : "bad input parameter environment"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v2/positivepay/rules/search" : {
      "post" : {
        "tags" : [ "Positive Pay" ],
        "summary" : "Search PositivePay Rules",
        "description" : "Search positive pay rules",
        "operationId" : "searchPositivePayRules",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number",
            "description" : "page index. And it a mandatory.",
            "example" : 1
          }
        }, {
          "name" : "records",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number",
            "description" : "page size. And it a mandatory.",
            "example" : 10
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SearchPositivePayRuleRequest"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchPositivePayRuleResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successfully processed request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchPositivePayRuleResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter environment"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "405" : {
            "description" : "bad input parameter environment"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v2/positivepay/rules" : {
      "put" : {
        "tags" : [ "Positive Pay" ],
        "summary" : "Update PositivePay Rule",
        "description" : "Update Positive Pay Rule",
        "operationId" : "updateRules",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PositivePayRule"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdatePositivePayRuleResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successfully processed request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdatePositivePayRuleResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter environment"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "405" : {
            "description" : "bad input parameter environment"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      },
      "post" : {
        "tags" : [ "Positive Pay" ],
        "summary" : "Add PositivePay Rule",
        "description" : "Add positive pay rule.",
        "operationId" : "addPositiveRules",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddPositivePayRule"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostPositivePayRuleResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successfully processed request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostPositivePayRuleResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter environment"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "405" : {
            "description" : "bad input parameter environment"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v2/positivepay/rules/{ruleUID}" : {
      "get" : {
        "tags" : [ "Positive Pay" ],
        "summary" : "Get PositivePay Rule By RuleUID",
        "description" : "Get Positive Pay Rule",
        "operationId" : "getPostivePayRule",
        "parameters" : [ {
          "name" : "ruleUID",
          "in" : "path",
          "description" : "Positive Pay Rule unique id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "default" : "11223"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPositivePayRuleUIDResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPositivePayRuleUIDResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      },
      "delete" : {
        "tags" : [ "Positive Pay" ],
        "summary" : "Delete PositivePay",
        "description" : "Delete positive pay rule.",
        "operationId" : "deleteRules",
        "parameters" : [ {
          "name" : "ruleUID",
          "in" : "path",
          "description" : "Positive Pay Rule Unique Id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "number",
            "format" : "int64",
            "example" : 1
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "delete positive rule",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeletePositivePayRuleResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successfully processed request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeletePositivePayRuleResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter environment"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "405" : {
            "description" : "bad input parameter environment"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v2/positivepay/rules/{ruleUID}/activate" : {
      "put" : {
        "tags" : [ "Positive Pay" ],
        "summary" : "Activate PositivePay Rule",
        "description" : "Activate positive pay rule",
        "operationId" : "activatePositivePayRule",
        "parameters" : [ {
          "name" : "ruleUID",
          "in" : "path",
          "description" : "Positive Pay Rule Unique Id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "activate positive rule",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActivatePositivePayRuleResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successfully processed request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActivatePositivePayRuleResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter environment"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "405" : {
            "description" : "bad input parameter environment"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v2/positivepay/rules/{ruleUID}/suspend" : {
      "put" : {
        "tags" : [ "Positive Pay" ],
        "summary" : "Suspend PositivePay Rule",
        "description" : "Suspend positive pay rule.",
        "operationId" : "suspendPositivePayRule",
        "parameters" : [ {
          "name" : "ruleUID",
          "in" : "path",
          "description" : "Positive Pay Rule Unique Id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "suspend positive rule",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActivatePositivePayRuleResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successfully processed request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActivatePositivePayRuleResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter environment"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "405" : {
            "description" : "bad input parameter environment"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v2/positivepay/exception/search" : {
      "post" : {
        "tags" : [ "Positive Pay" ],
        "summary" : "Search PositivePay Exceptions",
        "description" : "Return positive pay exceptions for a given criteria.",
        "operationId" : "searchPositivePayExceptions",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number",
            "description" : "page index. And it a mandatory.",
            "example" : 1
          }
        }, {
          "name" : "records",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number",
            "description" : "page size. And it a mandatory.",
            "example" : 10
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SearchPositivePayDecisionRequest"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchPositivePayDecisionResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successfully processed request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchPositivePayDecisionResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter environment"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "405" : {
            "description" : "bad input parameter environment"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v2/positivepay/exception/{exceptionUID}/approve" : {
      "put" : {
        "tags" : [ "Positive Pay" ],
        "summary" : "Approve PositivePay Exception",
        "description" : "Approve Positive Pay Exceptions",
        "operationId" : "approvePositivePayException",
        "parameters" : [ {
          "name" : "exceptionUID",
          "in" : "path",
          "description" : "A unique identifier associated with the positive pay rule exception",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActivatePositivePayExceptionResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActivatePositivePayExceptionResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v2/positivepay/exception/{exceptionUID}/reject" : {
      "put" : {
        "tags" : [ "Positive Pay" ],
        "summary" : "Reject Positive Pay Exception",
        "description" : "Reject Positive Pay Exceptions",
        "operationId" : "rejectExceptions",
        "parameters" : [ {
          "name" : "exceptionUID",
          "in" : "path",
          "description" : "A unique identifier associated with the positive pay exception",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActivatePositivePayExceptionResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActivatePositivePayExceptionResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v2/positivepay/exception/approveall" : {
      "put" : {
        "tags" : [ "Positive Pay" ],
        "summary" : "Approve All PositivePay Exceptions",
        "description" : "Approve all positivepay exceptions.",
        "operationId" : "approveAllExceptions",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApproveAllPositivePayExceptionRequest"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PositivePayExceptionApproveAllResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PositivePayExceptionApproveAllResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v3/payments/search" : {
      "post" : {
        "tags" : [ "Payments" ],
        "summary" : "Search payments",
        "description" : "Search payments based on various parameters. This operation retrieve limited payment data from the system",
        "operationId" : "searchPayments",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentSearch"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PaymentSearchResponse"
                  }
                }
              }
            }
          },
          "200" : {
            "description" : "Successfully processed request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PaymentSearchResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v3/payments/creditrequest" : {
      "post" : {
        "tags" : [ "Payments" ],
        "summary" : "Initiate a Credit Payment (Payout)",
        "description" : "Initiate a domestic or international credit payment [one time or recurring]\n",
        "operationId" : "createCreditPayment",
        "requestBody" : {
          "description" : "Credit Payment Request fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditPaymentRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "return payment response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter environment"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          },
          "405" : {
            "description" : "bad input parameter environment"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v3/payments/debitrequest" : {
      "post" : {
        "tags" : [ "Payments" ],
        "summary" : "Initiate a Debit Payment (Collection)",
        "description" : "Initiate a domestic or international debit payment [one time or recurring]\n",
        "operationId" : "createDebitPayment",
        "requestBody" : {
          "description" : "Debit Payment Request fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DebitPaymentRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "return payment response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter environment"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          },
          "405" : {
            "description" : "bad input parameter environment"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v3/payments/booktransfer" : {
      "post" : {
        "tags" : [ "Payments" ],
        "summary" : "Initiate a Book (Transfer) Payment",
        "description" : "Initiate a transfer payment request",
        "operationId" : "booktransfer",
        "requestBody" : {
          "description" : "Book Transfer [Transfer] Request Fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BookTransferRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "return payment response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BookTransferResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BookTransferResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter environment"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          },
          "405" : {
            "description" : "bad input parameter environment"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v3/payments/{paymentUID}" : {
      "get" : {
        "tags" : [ "Payments" ],
        "summary" : "Get Payment",
        "description" : "Retrieve a payment data using a payment unique identifier. This operation retrieve detailed payment data from the system",
        "operationId" : "getPaymentByUID",
        "parameters" : [ {
          "name" : "paymentUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Payment Unique Identifier"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/GetPaymentResponse"
                  }
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/GetPaymentResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v3/payments/{paymentUID}/cancel" : {
      "put" : {
        "tags" : [ "Payments" ],
        "summary" : "Cancel Payment",
        "description" : "Initiate a cancel payment request",
        "operationId" : "cancelPayment",
        "parameters" : [ {
          "name" : "paymentUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Unique payment Id"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CancelPaymentResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CancelPaymentResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v3/payments/{paymentUID}/return" : {
      "put" : {
        "tags" : [ "Payments" ],
        "summary" : "Return a payment",
        "description" : "Return a payment",
        "operationId" : "returnPayment",
        "parameters" : [ {
          "name" : "paymentUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Payment Unique Identifier. Return payment functionality is applicable only for incoming payments and payment status should be 'Processed'."
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReturnPaymentRequest"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReturnPaymentResponse"
                  }
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReturnPaymentResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v3/payments/{paymentUID}/reverse" : {
      "put" : {
        "tags" : [ "Payments" ],
        "summary" : "Reverse a payment",
        "description" : "Initiate a reverse payment request.",
        "operationId" : "reversePayment",
        "parameters" : [ {
          "name" : "paymentUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Payment Unique Identifier. Reverse payment functionality is applicable only for outgoing payments and payment status should be  'Processed'. Reverse functionality is not supported for the SWIFT payment type."
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReversePaymentRequest"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReversePaymentResponse"
                  }
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReversePaymentResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v4/payments/{paymentUID}/recurring/{recurrenceId}" : {
      "put" : {
        "tags" : [ "Payments" ],
        "summary" : "Update existing recurring payment.",
        "description" : "Update existing recurring payment.",
        "operationId" : "recurring",
        "parameters" : [ {
          "name" : "paymentUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "number",
            "description" : "Payment Unique Identifier"
          }
        }, {
          "name" : "recurrenceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "number",
            "description" : "Reccurence Unique Identifier"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecurringPaymentRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecurringPaymentResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Error" : {
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Error code assigned by the system",
            "example" : "invalidMethod"
          },
          "description" : {
            "type" : "string",
            "description" : "Error description to provide addtional details about the error code",
            "example" : "Invalid HTTP method used"
          }
        }
      },
      "SenderOrCreditAddress" : {
        "required" : [ "addressLine1", "city", "countryCode", "postalCode", "state" ],
        "properties" : {
          "addressLine1" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Bank address line 1",
            "example" : "111 My Street"
          },
          "addressLine2" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Bank address line 2. This is an optional field.",
            "example" : "Suite 210"
          },
          "city" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "City Name. This is an optional field needed for the domestic payment",
            "example" : "Charlotte"
          },
          "state" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "State Name. This is an optional field needed for the domestic payment",
            "example" : "North Carolina"
          },
          "postalCode" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Country specific postal/zip code. This is an optional field needed for the domestic payment.",
            "example" : "28269"
          },
          "countryCode" : {
            "maxLength" : 2,
            "minLength" : 2,
            "type" : "string",
            "description" : "Country codes per ISO 3166",
            "example" : "US."
          }
        },
        "description" : "The address pertains to the sender or debtor. This field is optional and is required only when the account is not present in the Finzly-CRM system. If any of the address fields are provided, it is necessary to include addressLine1, city, state, postalCode, and countryCode."
      },
      "ReceiverOrDebtorAddress" : {
        "required" : [ "addressLine1", "countryCode" ],
        "properties" : {
          "addressLine1" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Bank address line 1",
            "example" : "111 My Street"
          },
          "addressLine2" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Bank address line 2. This is an optional field.",
            "example" : "Suite 210"
          },
          "city" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "City Name. This is an optional field needed for the domestic payment",
            "example" : "Charlotte"
          },
          "state" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "State Name. This is an optional field needed for the domestic payment",
            "example" : "North Carolina"
          },
          "postalCode" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Country specific postal/zip code. This is an optional field needed for the domestic payment.",
            "example" : "28269"
          },
          "countryCode" : {
            "maxLength" : 2,
            "minLength" : 2,
            "type" : "string",
            "description" : "Country codes per ISO 3166",
            "example" : "US"
          }
        },
        "description" : "The address pertains to the receiver or debtor. This field is optional."
      },
      "BankAddress" : {
        "required" : [ "addressLine1", "city", "countryCode", "postalCode", "state" ],
        "properties" : {
          "addressLine1" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Bank address line 1",
            "example" : "111 My Street"
          },
          "addressLine2" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Bank address line 2. This is an optional field.",
            "example" : "Suite 210"
          },
          "city" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Bank City. This is an optional field.",
            "example" : "Charlotte"
          },
          "state" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Bank State. This is an optional field.",
            "example" : "North Carolina"
          },
          "postalCode" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Country specific postal/zip code. This is an optional field.",
            "example" : "28269"
          },
          "countryCode" : {
            "maxLength" : 2,
            "minLength" : 2,
            "type" : "string",
            "description" : "Country codes per ISO 3166.",
            "example" : "US"
          }
        },
        "description" : "The bank address information is required for banks located outside the United States. If any of the address fields are provided, it is mandatory to include addressLine1, city, state, postalCode, and countryCode."
      },
      "Approver" : {
        "properties" : {
          "approverId" : {
            "type" : "string",
            "description" : "User ID of the Approver",
            "example" : "johndoe"
          },
          "approvedDate" : {
            "type" : "string",
            "description" : "Approver Date",
            "example" : "03-03-2023"
          }
        }
      },
      "Audit" : {
        "properties" : {
          "submitterId" : {
            "type" : "string",
            "description" : "User that submitted transaction",
            "example" : "johndoe"
          },
          "submissionDate" : {
            "type" : "string",
            "description" : "Submission Date",
            "example" : "03-03-2023"
          },
          "approvers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Approver"
            }
          }
        }
      },
      "Bank" : {
        "properties" : {
          "bankIdType" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "The bank unique identifier type. Use SWIFT for the international money transfer. Use NID to identify the country specific bank id such as IBAN mainly for european countries, CLABE for Mexico, ABA for USA  etc.",
            "example" : "NID"
          },
          "bankId" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "This is needed when the bankIdType is set to 'NID'",
            "example" : "072000326"
          },
          "swiftCode" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "SWIFT Code. This is needed when the bankIdType is set to 'SWIFT'",
            "example" : "CHASUS33XXX"
          },
          "name" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of the bank. This is an optional for domestic [NID] and international [SWIFT] code. if not provided Finzly system will assign the name as per the directory lookup.",
            "example" : "XYZ Bank"
          },
          "countryCode" : {
            "maxLength" : 2,
            "minLength" : 2,
            "type" : "string",
            "description" : "Country codes per ISO 3166. This is an optional field",
            "example" : "US"
          },
          "address" : {
            "$ref" : "#/components/schemas/BankAddress"
          }
        },
        "description" : "The bank or intermediary bank details is needed to process the payment and it is required when the sender/receiver/debtor/creditor are not configured in the Finzly-CRM system. Based on the bankIDType either bankId or swiftCode is required. For the speed associated with the fedwire payment rail, this will be mapped to {4100} for the receiver bank and to {4000} for the receiver intermediary bank."
      },
      "Fee" : {
        "properties" : {
          "feeName" : {
            "maxLength" : 20,
            "type" : "string",
            "description" : "Fee Name. This is an optional field.",
            "example" : "Custom"
          },
          "currency" : {
            "type" : "string",
            "description" : "Fee Currency defaulted to USD if not provided.",
            "example" : "USD"
          },
          "amount" : {
            "maxLength" : 9,
            "type" : "number",
            "description" : "Fee to be charged for the payment transaction.",
            "example" : 10.0
          }
        }
      },
      "fedWireDetails" : {
        "properties" : {
          "businessFunctionCode" : {
            "maxLength" : 20,
            "type" : "string",
            "description" : "Fee Name. This is an optional field.",
            "example" : "Custom"
          },
          "comments" : {
            "type" : "string",
            "description" : "Fee Currency defaulted to USD if not provided.",
            "example" : "some comments."
          },
          "originatorToBeneficiaryInformation" : {
            "type" : "string",
            "description" : "originator to beneficiary information.",
            "example" : "some notes for the beneficiary"
          },
          "imad" : {
            "type" : "string",
            "description" : "It is a unique number given to each FedWire payment when using the Federal Reserve Bank Service and can be used to investigate and track wire transfers",
            "example" : "20220627MMQCTR7B000012"
          },
          "omad" : {
            "type" : "string",
            "description" : "The OMAD indicates a unique number assigned to each transfer providing delivery-related information",
            "example" : "0328QMGFNP6400002503281343FT0120232023"
          }
        }
      },
      "routingNumber" : {
        "properties" : {
          "institutionName" : {
            "type" : "string",
            "description" : "Bank Name. This is an optional field.",
            "example" : "ABC Bank"
          },
          "nationalIdName" : {
            "type" : "string",
            "description" : "nationalId name. This is an optional field..",
            "example" : "ABA"
          },
          "nationalId" : {
            "type" : "string",
            "description" : "bank routing number. This is not an optional field.",
            "example" : "123656698"
          },
          "recordTypeCode" : {
            "type" : "string",
            "description" : "record type code. This is an optional field.",
            "example" : "SEND"
          },
          "routingAddress" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/routingAddress"
            }
          },
          "deliveryMethods" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/deliveryMethods"
            }
          }
        }
      },
      "routingAddress" : {
        "properties" : {
          "addressLine1" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Bank address line 1",
            "example" : "111 My Street"
          },
          "addressLine2" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Bank address line 2. This is an optional field.",
            "example" : "Suite 210"
          },
          "city" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Bank City. This is an optional field.",
            "example" : "Charlotte"
          },
          "stateCode" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Bank State. This is an optional field.",
            "example" : "North Carolina"
          },
          "zipCode" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Country specific postal/zip code. This is an optional field.",
            "example" : "28269"
          },
          "countryCode" : {
            "maxLength" : 2,
            "minLength" : 2,
            "type" : "string",
            "description" : "Country codes per ISO 3166.",
            "example" : "US"
          },
          "country" : {
            "maxLength" : 20,
            "type" : "string",
            "description" : "Country name. This is an optional field.",
            "example" : "USA"
          }
        }
      },
      "deliveryMethods" : {
        "properties" : {
          "institutionName" : {
            "type" : "array",
            "description" : "List of delivery methods. This is an optional field.",
            "example" : "ACH"
          }
        }
      },
      "fedwireRoutingInfo" : {
        "properties" : {
          "fundsTransferStatus" : {
            "type" : "boolean",
            "description" : "boolean value. This is an optional field.",
            "example" : false
          },
          "fundsSettlementOnly" : {
            "type" : "boolean",
            "description" : "boolean value. This is an optional field.",
            "example" : false
          },
          "securityTransferStatus" : {
            "type" : "boolean",
            "description" : "boolean value. This is an optional field.",
            "example" : false
          }
        }
      },
      "rtpRoutingInfo" : {
        "properties" : {
          "participantId" : {
            "type" : "string",
            "description" : "participant Id. This is an optional field."
          },
          "services" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/services"
            }
          },
          "receivingConnection" : {
            "type" : "string",
            "description" : "receiving connection. This is an optional field."
          },
          "signOnStatus" : {
            "type" : "string",
            "description" : "signOn status. This is an optional field."
          },
          "participantActivationDate" : {
            "type" : "string",
            "description" : "participant activation date. This is an optional field."
          },
          "status" : {
            "type" : "string",
            "description" : "status. This is an optional field."
          },
          "connectionStatus" : {
            "type" : "string",
            "description" : "connection status. This is an optional field."
          }
        }
      },
      "fedNowRoutingInfo" : {
        "properties" : {
          "services" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/services"
            }
          },
          "status" : {
            "type" : "string",
            "description" : "status. This is an optional field."
          },
          "connectionStatus" : {
            "type" : "string",
            "description" : "connection status. This is an optional field."
          }
        }
      },
      "services" : {
        "properties" : {
          "institutionName" : {
            "maxLength" : 20,
            "type" : "array",
            "description" : "List of ervices. This is an optional field.",
            "example" : "Custom"
          }
        }
      },
      "PaymentRecurrence" : {
        "required" : [ "frequency", "payUntil" ],
        "properties" : {
          "frequency" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Frequency associated with the payment recurrence. The valid values are Daily, Weekly, BiWeekly, Monthly, Quarterly, SemiAnnually, Yearly.",
            "example" : "Daily"
          },
          "payUntil" : {
            "maxLength" : 25,
            "type" : "string",
            "description" : "The end of payment recurrence. If it is set to Cancelled that means payment will be processing as per the frequency until it cancelled. If it is set to EndDate that means payment will be processing per the frequency until the defined EndDate. If it is set to NumberOfPayments that means payment will be processing per the frequency until the defined number of payments. ",
            "example" : "Cancelled",
            "enum" : [ "Cancelled", "EndDate", "NumberOfPayments" ]
          },
          "endDate" : {
            "type" : "string",
            "description" : "This is needed when the payUntil is set to EndDate. The valid date fromat is MM-dd-yyyy.",
            "example" : "01-29-2023"
          },
          "numberOfPayments" : {
            "maxLength" : 1000,
            "type" : "integer",
            "description" : "This is needed when the payUntil is set to NumberOfPayments",
            "example" : 10
          }
        },
        "description" : "Set the payment recurrence based on the available options."
      },
      "PaymentSearch" : {
        "required" : [ "limit", "page" ],
        "properties" : {
          "paymentUUID" : {
            "type" : "string",
            "description" : "Payment unique identifier.",
            "example" : "1369308"
          },
          "fromDate" : {
            "type" : "string",
            "description" : "From date. The valid date format is in [MM-dd-yyyy]. ",
            "example" : "03-25-2024"
          },
          "toDate" : {
            "type" : "string",
            "description" : "To date. The valid date format is in [MM-dd-yyyy]",
            "example" : "04-25-2024"
          },
          "currency" : {
            "type" : "string",
            "description" : "Payment currency. The valid country currency code should be per ISO 4217 standard.",
            "example" : "USD"
          },
          "minAmount" : {
            "type" : "number",
            "description" : "Minimum payment amount.",
            "example" : 100.0
          },
          "maxAmount" : {
            "type" : "number",
            "description" : "Maximum payment amount.",
            "example" : 1000.0
          },
          "paymentAmount" : {
            "type" : "number",
            "description" : "Payment amount.",
            "example" : 120.0
          },
          "forexContractNo" : {
            "type" : "string",
            "description" : "FX contract number is present only for the internal payment",
            "example" : "13896558"
          },
          "receiverAccountNo" : {
            "type" : "string",
            "description" : "Receiver's bank account number for the withdrawal of funds.",
            "example" : "2236569989"
          },
          "receiverName" : {
            "type" : "string",
            "description" : "Receiver bank account number to which money will be withdrawn.",
            "example" : "xyz"
          },
          "senderName" : {
            "type" : "string",
            "description" : "Name of the sender linked to the payment.",
            "example" : "corp"
          },
          "senderAccountNo" : {
            "type" : "string",
            "description" : "Sender's bank account number from which money will be withdrawn.",
            "example" : "2288556932"
          },
          "sourceRefNo" : {
            "type" : "string",
            "description" : "Payment source reference number",
            "example" : "839489343"
          },
          "status" : {
            "type" : "string",
            "description" : "Payment status, e.g. PROCESSED, TRANSMITTED_TO_FED, CANCELLED, FUTURE_DATED, PENDING_APPROVAL, PARTIALLY_APPROVED, APPROVED, etc...",
            "example" : "PROCESSED"
          },
          "wireType" : {
            "type" : "string",
            "description" : "Payment wire type e.g. OUTGOING_PAYMENT, INCOMING_PAYMENT",
            "example" : "OUTGOING_PAYMENT"
          },
          "page" : {
            "type" : "integer",
            "description" : "What page of results should be returned? The minimum page size is 1.",
            "example" : 1
          },
          "limit" : {
            "type" : "integer",
            "description" : "Number of records to be included in each page. The minimum limit is 1 and the maximum limit is configurable in the system. If it is not configured then the default max limit is 100.",
            "example" : 10
          }
        },
        "description" : "Payment search parameters"
      },
      "Pagination" : {
        "properties" : {
          "totalRecords" : {
            "type" : "number",
            "description" : "Total number of records exist in the system for a given filter",
            "format" : "integer",
            "example" : 100
          },
          "returnedRecords" : {
            "type" : "number",
            "description" : "Total number of records returned",
            "format" : "integer",
            "example" : 10
          },
          "pageReturned" : {
            "type" : "number",
            "description" : "Current number of page returned",
            "format" : "integer",
            "example" : 2
          },
          "pageSize" : {
            "type" : "number",
            "description" : "Total number of records in a given pages",
            "format" : "integer",
            "example" : 10
          }
        }
      },
      "Groups" : {
        "type" : "object",
        "properties" : {
          "condition" : {
            "type" : "string",
            "example" : "OR"
          },
          "type" : {
            "type" : "string"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Groups"
            }
          },
          "fields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Fields"
            }
          }
        }
      },
      "Fields" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "beneficiaryBankSWIFT"
          },
          "displayName" : {
            "type" : "string",
            "example" : "Beneficiary Bank SWIFT"
          },
          "swiftCode" : {
            "type" : "string"
          },
          "swiftTag" : {
            "type" : "string"
          },
          "fieldLength" : {
            "type" : "integer"
          }
        }
      },
      "PaymentNoteOptionValueChildren" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/PaymentNoteOptionValueChildren_data"
          }
        }
      },
      "AdditionalInfoCreditPayment" : {
        "properties" : {
          "channel" : {
            "maxLength" : 25,
            "type" : "string",
            "description" : "The channel name set by the payment origination system such as API, TELLER etc. This is an optional field and defaulted to API if it is not provided. The channel names should be defined in the Finzly system before it can be used in the API.",
            "example" : "API"
          },
          "costCenter" : {
            "maxLength" : 25,
            "type" : "string",
            "description" : "This is an optional field. A cost center is a function within an organization that does not directly add to profit but still costs money to operate, such as the accounting, HR, or IT departments",
            "example" : "12897"
          },
          "requestMethod" : {
            "maxLength" : 45,
            "type" : "string",
            "description" : "This is an optional field. Customer payment request method from a given channel for e.g. WALK-IN, PHONE-IN etc.",
            "example" : "WALK-IN"
          },
          "detailsOfCharges" : {
            "maxLength" : 3,
            "minLength" : 3,
            "type" : "string",
            "description" : "who pays the payment charges. This is an optional field. For the speed associated with the FEDWIRE only BEN and SHA are applicable values. For the speed associated with the SWIFT OUR, BEN and SHA are applicable values.",
            "example" : "OUR"
          },
          "secCode" : {
            "maxLength" : 3,
            "type" : "string",
            "description" : "An SEC code is a three letter code that describes how a payment was authorized by the consumer or business receiving an ACH transaction. This is an optional field needed only for the speed associated with the ACH payment rail.",
            "example" : "CCD"
          },
          "transactionTypeCode" : {
            "maxLength" : 3,
            "minLength" : 3,
            "type" : "string",
            "description" : "This is an optional field. This is a secondary secCode can be set when the sec code is set to IAT.",
            "example" : "ANN"
          },
          "receiverIdentificationNumber" : {
            "maxLength" : 50,
            "type" : "string",
            "description" : "This is an optional field. This is Receiver’s DFI Identification Number can be set when the secCode is set to IAT",
            "example" : "12334356"
          },
          "fxContractNumber" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Unique identifier associated with the FX trade applicable for the international payment",
            "example" : "111234"
          },
          "originatortoBeneficiary" : {
            "maxLength" : 140,
            "type" : "string",
            "description" : "Any additional information to be provided to the wire recipient. This is an optional field. For the speed associated with the FEDWIRE this is mapped to {6000} tag in four lines and each line will have 35 characters.",
            "example" : "OBI Notes"
          },
          "senderToReceiverNotes" : {
            "maxLength" : 210,
            "type" : "string",
            "description" : "This is applicable for the fedwire payment specifies additional information for the Receiver. This is an optional field. For the speed associated with the FEDWIRE this is mapped to {6500} tag.",
            "example" : "Sender To Reciever Notes"
          },
          "remittanceMethod" : {
            "maxLength" : 10,
            "type" : "string",
            "description" : "This is applicable for the RTP payment. This is an optional field",
            "example" : "EMAIL",
            "enum" : [ "EMAIL", "URID" ]
          },
          "paymentRemittanceNotes" : {
            "type" : "string",
            "description" : "This is applicable for the ACH and RTP payment. It signifies the information originator requests its bank to transmit to the Beneficiary about the reason for a credit transfer to facilitate reconciliation by the Beneficiary. This is an optional field. The charater limit for the ACH payment is 80 characters and for RTP 140 characters.",
            "example" : "Remittance Notes"
          },
          "localInstruments" : {
            "type" : "string",
            "description" : "Local instrument code applicable for the CTP fedwire or RTP or FEDNOW payment.",
            "example" : "COVS",
            "enum" : [ "COVS", "ANSI", "GXML", "IXML", "NARR", "S820", "SWIF", "UEDI", "RRMT", "PROP", "STANDARD", "ZELLE", "INTERMEDIARY", "FOREIGN_AFFILIATE", "FDNA" ]
          },
          "referenceForBeneficiary" : {
            "maxLength" : 16,
            "type" : "string",
            "description" : "This is applicable for the fedwire payment where the local instrument set to COVS. This specifies the reference details for the beneficiary. This is mapped to fedwire {4320} tag.",
            "example" : "RefForBeneficiary Details"
          },
          "unstructuredAddendaInfo" : {
            "$ref" : "#/components/schemas/AdditionalInfoCreditPayment_unstructuredAddendaInfo"
          },
          "proprietaryCode" : {
            "type" : "string",
            "description" : "This is applicable for the fedwire payment where the local instrument set to PROP"
          },
          "operationNote" : {
            "maxLength" : 200,
            "type" : "string",
            "description" : "Operation Notes"
          }
        }
      },
      "AdditionalInfoDebitPayment" : {
        "properties" : {
          "channel" : {
            "maxLength" : 25,
            "type" : "string",
            "description" : "The channel name set by the payment origination system such as API, TELLER etc. This is an optional field and defaulted to API if it is not provided. The channel names should be defined in the Finzly system before it can be used in the API.",
            "example" : "API"
          },
          "costCenter" : {
            "maxLength" : 25,
            "type" : "string",
            "description" : "This is an optional field. A cost center is a function within an organization that does not directly add to profit but still costs money to operate, such as the accounting, HR, or IT departments",
            "example" : "12897"
          },
          "requestMethod" : {
            "maxLength" : 45,
            "type" : "string",
            "description" : "This is an optional field. Customer payment request method from a given channel for e.g. WALK-IN, PHONE-IN etc.",
            "example" : "WALK-IN"
          },
          "detailsOfCharges" : {
            "maxLength" : 3,
            "minLength" : 3,
            "type" : "string",
            "description" : "who pays the payment charges. This is an optional field. For the speed associated with the FEDWIRE only BEN and SHA are applicable values. For the speed associated with the SWIFT OUR, BEN and SHA are applicable values.",
            "example" : "OUR"
          },
          "secCode" : {
            "maxLength" : 3,
            "type" : "string",
            "description" : "An SEC code is a three letter code that describes how a payment was authorized by the consumer or business receiving an ACH transaction. This is an optional field needed only for the speed associated with the ACH payment rail.",
            "example" : "CCD"
          },
          "transactionTypeCode" : {
            "maxLength" : 3,
            "minLength" : 3,
            "type" : "string",
            "description" : "This is an optional field. This is a secondary secCode can be set when the sec code is set to IAT.",
            "example" : "ANN"
          },
          "receiverIdentificationNumber" : {
            "maxLength" : 50,
            "type" : "string",
            "description" : "This is an optional field. This is Receiver’s DFI Identification Number can be set when the secCode is set to IAT.",
            "example" : "12334356"
          },
          "fxContractNumber" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Unique identifier associated with the FX trade applicable for the international payment",
            "example" : "111234"
          },
          "originatortoBeneficiary" : {
            "maxLength" : 140,
            "type" : "string",
            "description" : "Any additional information to be provided to the wire recipient. This is an optional field. For the speed associated with the FEDWIRE this is mapped to {6000} tag in four lines and each line will have 35 characters.",
            "example" : "OBI Notes"
          },
          "senderToReceiverNotes" : {
            "maxLength" : 210,
            "type" : "string",
            "description" : "This is applicable for the fedwire payment specifies additional information for the Receiver. This is an optional field. For the speed associated with the FEDWIRE this is mapped to {6500} tag.",
            "example" : "Sender To Reciever Notes"
          },
          "paymentRemittanceNotes" : {
            "type" : "string",
            "description" : "This is applicable for the ACH and RTP payment. It signifies the information originator requests its bank to transmit to the Beneficiary about the reason for a credit transfer to facilitate reconciliation by the Beneficiary. This is an optional field. The charater limit for the ACH payment is 80 characters and for RTP 140 characters.",
            "example" : "Remittance Notes"
          },
          "operationNote" : {
            "maxLength" : 200,
            "type" : "string",
            "description" : "Operation Notes"
          },
          "requestedExecutionDate" : {
            "type" : "string",
            "description" : "This field is required for RFP FEDNOW payments, and the valid date format is [MM-dd-yyyy]. If earlyPayment is set to 'False,' the debtor must instruct payment on the date specified in the request for payment. If earlyPayment is set to 'True,' the debtor has the option to instruct payment before the date indicated in the request for payment.",
            "example" : "07-21-2022"
          },
          "expiryDate" : {
            "type" : "string",
            "description" : "This field is required for RFP FEDNOW payments, and the valid date format is [MM-dd-yyyy]. After this date, the debtor is no longer able to accept, pay, decline, or reject the request for payment.",
            "example" : "07-21-2022"
          },
          "amountModificationAllowed" : {
            "type" : "boolean",
            "description" : "This field is optional for RFP FEDNOW payments. When set to 'True,' the debtor has the option to instruct payment for an amount different than the one indicated in the request for payment (Instructed Amount). When set to 'False,' the debtor is required to instruct payment for the exact amount specified in the request for payment (Instructed Amount).",
            "example" : true
          },
          "earlyPayment" : {
            "type" : "boolean",
            "description" : "This field is optional for RFP FEDNOW payments. When set to 'True,' the debtor is allowed to instruct payment before the date indicated in the request for payment (Requested Execution Date). When set to 'False,' the debtor is required to instruct payment on the date indicated in the request for payment (Requested Execution Date).",
            "example" : true
          },
          "guaranteedPayment" : {
            "type" : "boolean",
            "description" : "This field is optional for RFP FEDNOW payments. When set to 'True,' the creditor requests payment guarantees from the debtor when scheduling the payment. When set to 'False,' the creditor does not request payment guarantees from the debtor when scheduling the payment.",
            "example" : true
          }
        }
      },
      "BookTransferSender" : {
        "properties" : {
          "accountUID" : {
            "maxLength" : 11,
            "type" : "string",
            "description" : "Transfer payment sender bank account unique identifier exist in the Finzly-CRM system. This is an optional field, if this is provided then rest of the sender information are not needed.",
            "example" : "123452334"
          },
          "accountNumber" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Bank account number from where the money will be withdrawn. This is an optional field, it is required when the accountUID is not provided.",
            "example" : "123452334"
          },
          "accountType" : {
            "type" : "string",
            "description" : "Type of the account. This is an optional field, it is required when the accountUID is not provided. The possible values are DDA or GL.",
            "example" : "DDA",
            "enum" : [ "DDA", "GL" ]
          },
          "currency" : {
            "maxLength" : 3,
            "type" : "string",
            "description" : "This is an optional field it will be defaulted to USD.",
            "example" : "USD"
          },
          "routingNumber" : {
            "maxLength" : 11,
            "type" : "string",
            "description" : "Optional field, only required when accountUID is not provided and accountType is DDA",
            "example" : "022300173"
          }
        }
      },
      "BookTransferReceiver" : {
        "properties" : {
          "accountUID" : {
            "maxLength" : 11,
            "type" : "string",
            "description" : "Transfer payment sender bank account unique identifier exist in the Finzly-CRM system. This is an optional field, if this is provided then rest of the sender information are not needed.",
            "example" : "022300173"
          },
          "accountNumber" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Bank account number from where the money will be withdrawn. This is an optional field, it is required when the accountUID is not provided.",
            "example" : "123452334"
          },
          "accountType" : {
            "type" : "string",
            "description" : "Type of the account. This is an optional field, it is required when the accountUID is not provided. The possible values are DDA or GL.",
            "example" : "DDA",
            "enum" : [ "DDA", "GL" ]
          },
          "currency" : {
            "maxLength" : 3,
            "type" : "string",
            "description" : "This is an optional field it will be defaulted to USD.",
            "example" : "USD"
          },
          "routingNumber" : {
            "maxLength" : 11,
            "type" : "string",
            "description" : "Optional field, only required when accountUID is not provided and accountType is DDA",
            "example" : "022300173"
          }
        }
      },
      "PaymentSender" : {
        "properties" : {
          "accountUID" : {
            "maxLength" : 11,
            "type" : "string",
            "description" : "Sender bank account unique identifier exist in the Finzly-CRM system. This is an optional field, if this is provided then rest of the sender information are not needed.",
            "example" : "1021"
          },
          "achCompanyID" : {
            "maxLength" : 10,
            "type" : "string",
            "description" : "ACH origination/company id is a 10-digit identifier used for ACH payment processing, to identify the entity collecting payments or sending money via ACH (also referred to as an “originator”). This is an optional field, it is required when the accountUID is not provided and payment speed associated with the ACH payment rail.",
            "example" : "122334789"
          },
          "accountNumber" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender bank account number from where the money will be withdrawn. This is an optional field, it is required when the accountUID is not provided.",
            "example" : "123452334"
          },
          "accountType" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Type of the account. This is an optional field, it is required when the accountUID is not provided. The possible values are Deposit or GL or Loan.",
            "example" : "Deposit"
          },
          "subAccountType" : {
            "maxLength" : 20,
            "type" : "string",
            "description" : "This is an optional field, it is required when the accountUID is not provided and for the speed associated with the ACH payment rail (This helps to identify the ACH tran code). If the accountType is GL then subAccountType should be GL also. The possible values are Checking, Savings, Loan or GL.",
            "example" : "Checking"
          },
          "name" : {
            "maxLength" : 50,
            "type" : "string",
            "description" : "Sender name associated with the payment. This is an optional field, it is required when the accountUID is not provided. For the speed associated with the fedwire payment rail, this will be mapped to {5000} tag.",
            "example" : "Sender Name"
          },
          "entityType" : {
            "maxLength" : 45,
            "type" : "string",
            "description" : "Type of the entity. It is required when the accountUID is empty and accountType is Deposit. The valid values are Consumer or Corporate.",
            "example" : "Consumer",
            "enum" : [ "Consumer", "Corporate" ]
          },
          "address" : {
            "$ref" : "#/components/schemas/SenderOrCreditAddress"
          },
          "bankIdType" : {
            "maxLength" : 10,
            "type" : "string",
            "description" : "This is an optional field, it is required when the accountUID is not provided. The unique identifier type to identifiy the bank details. You have two options either provide NID or SWIFT. A SWIFT code — sometimes also called a BIC number — is a standard format for Business Identifier Codes (BIC). It is an 8 to 11-character code that identifies banks globally. An NID number (a.k.a ABA/routing number) it is 9-digit numeric characters used by banks to identify specific financial institutions within the United States.",
            "example" : "NID",
            "enum" : [ "NID", "BIC" ]
          },
          "bankId" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "This is an optional field required only if the sender account does not exists in the CRM system. This signifies the NID (ABA/Routing numner) or SWIFT code as per the bankIdType. For the speed associated with the fedwire payment rail, this will be mapped to {3100} tag.",
            "example" : "101206101"
          },
          "phone" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Phone number associated with the sender. This is an optional field.",
            "example" : "18001236754"
          },
          "email" : {
            "maxLength" : 100,
            "type" : "string",
            "description" : "Email associated with the sender. This is an optional field.",
            "example" : "email@domain.com"
          },
          "swiftTag" : {
            "type" : "string",
            "description" : "This is applicable for the CTP fedwire payment where the local instrument set to COVS"
          },
          "swiftNote" : {
            "type" : "string",
            "description" : "This is applicable for the CTP fedwire payment where the local instrument set to COVS"
          },
          "correspondentBankId" : {
            "maxLength" : 10,
            "type" : "string",
            "description" : "This is an optional field. This is used to provide the \"routing number\" for the receiver correspondent bank in order to process the international Fedwire payment [where the receiver bank country is outside of the USA]. If the \"correspondentBankId\" is blank for the international Fedwire payment, then the Finzly system uses the internal configuration to get the correspondent bank details based on the country and currency setup.",
            "example" : "026009593"
          }
        },
        "description" : "Payment sender and account details from which the money will be deducted."
      },
      "PaymentReceiver" : {
        "properties" : {
          "accountUID" : {
            "maxLength" : 11,
            "type" : "string",
            "description" : "Receiver bank account unique identifier exist in the Finzly-CRM system. This is an optional field, if this is provided then rest of the receiver information are not needed.",
            "example" : "209219"
          },
          "accountNumber" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver bank account number to which money will be deposited. This is the country specific bank account number such as ABA for USA, CLABE for Mexico,IBAN mainly for european countries  etc. This is required if accountUID is not provided.",
            "example" : "123422434"
          },
          "accountType" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Type of the account. This is an optional field, it is required when the accountUID is not provided.",
            "example" : "Deposit",
            "enum" : [ "Deposit" ]
          },
          "subAccountType" : {
            "maxLength" : 20,
            "type" : "string",
            "description" : "Whether the receiver account is a Checking or Savings or Loan. This is an optional field, it is required when the accountUID is not provided and for the speed associated with the ACH payment rail (This helps to identify the ACH tran code).",
            "example" : "Checking"
          },
          "accountCurrency" : {
            "maxLength" : 3,
            "minLength" : 3,
            "type" : "string",
            "description" : "Receiver currency. The valid currency code should be per ISO 4217 standard.",
            "example" : "USD"
          },
          "name" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver name associated with the payment. This is an optional field, it is required when the accountUID is not provided. For the speed associated with the fedwire payment rail, this will be mapped to {4200} tag.",
            "example" : "Receiver name"
          },
          "address" : {
            "$ref" : "#/components/schemas/ReceiverOrDebtorAddress"
          },
          "phone" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Phone number associated with the receiver. This is an optional field.",
            "example" : "18001236754"
          },
          "email" : {
            "maxLength" : 100,
            "type" : "string",
            "description" : "Email associated with the receiver. This is an optional field.",
            "example" : "email@domain.com"
          },
          "bank" : {
            "$ref" : "#/components/schemas/Bank"
          },
          "intermediaryBank" : {
            "$ref" : "#/components/schemas/Bank"
          },
          "swiftTag" : {
            "type" : "string",
            "description" : "Beneficiary customer swift tag. This is applicable for the CTP fedwire payment where the local instrument set to COVS."
          },
          "swiftNote" : {
            "type" : "string",
            "description" : "Beneficiary customer swift note.This is applicable for the CTP fedwire payment where the local instrument set to COVS"
          }
        },
        "description" : "Payment receiver and account details to which the money will be deposited."
      },
      "PaymentCreditor" : {
        "properties" : {
          "accountUID" : {
            "maxLength" : 11,
            "type" : "string",
            "description" : "Creditor bank account unique identifier exist in the Finzly-CRM system. This is an optional field, if this is provided then rest of the sender information are not needed.",
            "example" : "1021"
          },
          "achCompanyID" : {
            "maxLength" : 10,
            "type" : "string",
            "description" : "ACH company/origination id is a 10-digit identifier used by bank and Nacha, the operator of the ACH network, to identify the entity collecting payments or sending money via ACH (also referred to as an “originator”)",
            "example" : "122334789"
          },
          "accountNumber" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Bank account number to which the money will be deposited",
            "example" : "123452334"
          },
          "accountType" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Type of the account. This is an optional field, it is required when the accountUID is not provided. The possible values are Deposit or GL or Loan.",
            "example" : "Deposit"
          },
          "subAccountType" : {
            "maxLength" : 20,
            "type" : "string",
            "description" : "This is an optional field, it is required when the accountUID is not provided and for the speed associated with the ACH payment rail (This helps to identify the ACH tran code). If the accountType is GL then subAccountType should be GL also. The possible values are Checking, Savings, Loan or GL.",
            "example" : "Checking"
          },
          "name" : {
            "maxLength" : 50,
            "type" : "string",
            "description" : "Creditor name associated with the payment. This is an optional field, it is required when the accountUID is not provided. For the speed associated with the fedwire payment rail, this will be mapped to {5000} tag.",
            "example" : "Creditor name"
          },
          "entityType" : {
            "maxLength" : 45,
            "type" : "string",
            "description" : "Type of the entity. It is required when the accountUID is empty and accountType is Deposit. The valid values are Consumer or Corporate.",
            "example" : "Consumer",
            "enum" : [ "Consumer", "Corporate" ]
          },
          "address" : {
            "$ref" : "#/components/schemas/SenderOrCreditAddress"
          },
          "bankIdType" : {
            "maxLength" : 10,
            "type" : "string",
            "description" : "This is an optional field, it is required when the accountUID is not provided. The unique identifier type to identifiy the bank details. You have two options either provide NID or SWIFT. A SWIFT code — sometimes also called a BIC number — is a standard format for Business Identifier Codes (BIC). It is an 8 to 11-character code that identifies banks globally. An NID number (a.k.a ABA/routing number) it is 9-digit numeric characters used by banks to identify specific financial institutions within the United States.",
            "example" : "NID"
          },
          "bankId" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "This is an optional field required only if the sender account does not exists in the CRM system. This signifies the NID (ABA/Routing numner) or SWIFT code as per the bankIdType. For the speed associated with the fedwire payment rail, this will be mapped to {3100} tag.",
            "example" : "101206101 or FBOLUS6LXXX"
          },
          "phone" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Phone number associated with the creditor",
            "example" : "18001236754"
          },
          "email" : {
            "maxLength" : 100,
            "type" : "string",
            "description" : "Email associated with the creditor",
            "example" : "email@domain.com"
          }
        },
        "description" : "Payment creditor and account details to which the money will be deposited."
      },
      "PaymentDebtor" : {
        "properties" : {
          "accountUID" : {
            "maxLength" : 11,
            "type" : "string",
            "description" : "Debtor bank account unique identifier exist in the Finzly-CRM system. This is an optional field, if this is provided then rest of the debtor information are not needed.",
            "example" : "1021"
          },
          "accountNumber" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver bank account number to which money will be deposited. This is the country specific bank account number such as IBAN mainly for european countries, CLABE for Mexico, ABA for USA etc.",
            "example" : "123422434"
          },
          "accountType" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Type of the account. This is an optional field, it is required when the accountUID is not provided.",
            "example" : "Deposit"
          },
          "subAccountType" : {
            "maxLength" : 20,
            "type" : "string",
            "description" : "Sub acount type associated with the account possible values are Checking or Savings",
            "example" : "Checking"
          },
          "accountCurrency" : {
            "maxLength" : 3,
            "minLength" : 3,
            "type" : "string",
            "description" : "Debtor currency. The valid currency code should be per ISO 4217 standard.",
            "example" : "USD"
          },
          "name" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Debtor name for the account. This is an optional field, it is required when the accountUID is not provided. For the speed associated with the fedwire payment rail, this will be mapped to {4200} tag.",
            "example" : "XYZ Name"
          },
          "address" : {
            "$ref" : "#/components/schemas/ReceiverOrDebtorAddress"
          },
          "phone" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Phone number associated with the debtor. This is an optional field.",
            "example" : "18001236754"
          },
          "email" : {
            "maxLength" : 100,
            "type" : "string",
            "description" : "Email associated with the debtor. This is an optional field.",
            "example" : "email@domain.com"
          },
          "bank" : {
            "$ref" : "#/components/schemas/Bank"
          },
          "intermediaryBank" : {
            "$ref" : "#/components/schemas/Bank"
          }
        },
        "description" : "Payment debtor and account details from which the money will be deducted."
      },
      "SearchPositivePayDecisionRequest" : {
        "properties" : {
          "paymentUID" : {
            "type" : "string",
            "description" : "A unique identifier associated with the payment",
            "example" : "112233"
          },
          "customerUID" : {
            "type" : "string",
            "description" : "Customer unique identifier associated with the customer in the Finzly's CRM system",
            "example" : "112233"
          },
          "customerName" : {
            "type" : "string",
            "description" : "Customer name associated with the payment positive rule",
            "example" : "ABC Company"
          },
          "customerAccountNumber" : {
            "type" : "string",
            "description" : "Bank Account Number",
            "example" : "12387878"
          },
          "decisionDateTime" : {
            "type" : "string",
            "description" : "Decision date and time in (EST)",
            "example" : "04-23-2024"
          },
          "amount" : {
            "type" : "number",
            "description" : "Payment amount",
            "example" : 10.0
          },
          "positivePayDecisionStatus" : {
            "type" : "string",
            "description" : "Decision status",
            "example" : "PENDING"
          },
          "secCode" : {
            "type" : "string",
            "description" : "SEC code associated with the ACH postive rule",
            "example" : "CCD"
          }
        }
      },
      "SearchPositivePayDecisionResponse" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "This will return Success/Failed",
            "example" : "Success or Failure"
          },
          "code" : {
            "type" : "string",
            "description" : "This will indicate the error code in case of API error",
            "example" : "PPD001"
          },
          "message" : {
            "type" : "string",
            "description" : "This will be the detailed error message indicating what failed and how to fix the issue",
            "example" : "Failed to get the positive pay exception information: <Failure Reason>."
          },
          "pagination" : {
            "$ref" : "#/components/schemas/Pagination"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PositivePayExceptionDecision"
            }
          }
        }
      },
      "PositivePayExceptionDecision" : {
        "properties" : {
          "exceptionUID" : {
            "type" : "string",
            "description" : "Unique identifier associated with positive pay exception"
          },
          "paymentUID" : {
            "type" : "string",
            "description" : "Unique identifier associated with payment",
            "example" : "100100"
          },
          "paymentRuleType" : {
            "type" : "string",
            "description" : "Payment type associated with the rule such as ACH for Postive Pay, FEDWIRE for Drawdown, RFP for Request for Pay etc.",
            "example" : "ACH, FEDWIRE, RFP"
          },
          "amount" : {
            "type" : "number",
            "description" : "Payment Amounnt",
            "format" : "int64",
            "example" : 123456789
          },
          "achCompanyID" : {
            "type" : "number",
            "description" : "ACH company ID is a 10-digit identifier used by banks and Nacha, the operator of the ACH network, to identify the entity collecting payments or sending money via ACH (also referred to as an “originator”)",
            "example" : 122334789
          },
          "customerAccountNumber" : {
            "type" : "string",
            "description" : "Bank Account Number",
            "example" : "12387878"
          },
          "beneName" : {
            "type" : "string",
            "description" : "A beneficiary is the person or entity that will receive the payment",
            "example" : "XYZ Name"
          },
          "beneBankName" : {
            "type" : "string",
            "description" : "A beneficiary bank name, which is associated with the benificiary account.",
            "example" : "Bank Name"
          },
          "exceptionReason" : {
            "type" : "string",
            "description" : "Reason for the positive pay exception",
            "example" : "Amount Mismatch"
          },
          "exceptionDateTime" : {
            "type" : "string",
            "description" : "Decision date and time in (EST)",
            "example" : "01-17-2024"
          },
          "expiryDateTime" : {
            "type" : "string",
            "description" : "Positive Pay Rule Exception expiry date time in (EST)",
            "example" : "01-17-2024"
          },
          "positivePayDecisionStatus" : {
            "type" : "string",
            "description" : "Decision status"
          },
          "secCode" : {
            "type" : "string",
            "example" : "CCD"
          },
          "approvedBy" : {
            "type" : "string",
            "description" : "User who approved the exception",
            "example" : "user001"
          },
          "approvedDate" : {
            "type" : "string",
            "description" : "Approval date and time in (EST)",
            "example" : "01-17-2024"
          }
        }
      },
      "ActivatePositivePayExceptionResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "This will return Success/Failed",
            "example" : "Success or Failure"
          },
          "code" : {
            "type" : "string",
            "description" : "This will indicate the error code in case of API error",
            "example" : "PPD001"
          },
          "message" : {
            "type" : "string",
            "description" : "This will be the detailed error message indicating what failed and how to fix the issue",
            "example" : "Failed to activate or suspend a positive pay exception: <Failure Reason>."
          },
          "exceptionUID" : {
            "type" : "number",
            "description" : "Unique identifier associated with positive pay exception",
            "format" : "int64",
            "example" : 123456789
          }
        }
      },
      "PositivePayExceptionApproveAllResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "This will return Success/Failed",
            "example" : "Success or Failure"
          },
          "code" : {
            "type" : "string",
            "description" : "This will indicate the error code in case of API error",
            "example" : "PPD001"
          },
          "message" : {
            "type" : "string",
            "description" : "This will be the detailed error message indicating what failed and how to fix the issue",
            "example" : "Failed to approve all positive pay rule exception: <Failure Reason>."
          }
        }
      },
      "SearchPositivePayRuleRequest" : {
        "properties" : {
          "beneBankId" : {
            "type" : "string",
            "description" : "Bank unique id or routing number that is used to identify a specific bank",
            "example" : "12345678"
          },
          "beneName" : {
            "type" : "string",
            "description" : "The name of the company or entity that originated the payment request",
            "example" : "XYZ Name"
          },
          "beneBankName" : {
            "type" : "string",
            "description" : "Bank name where the company account is held.",
            "example" : "XYZ Bank"
          },
          "beneAccountNumber" : {
            "type" : "string",
            "description" : "A company bank account number",
            "example" : "12345678"
          },
          "amount" : {
            "type" : "number",
            "description" : "Payment amount",
            "example" : 10.0
          },
          "customerName" : {
            "type" : "string",
            "description" : "Name of the customer who created the positive rule"
          },
          "customerAccountNumber" : {
            "type" : "string",
            "description" : "Customer bank account number on which the positive rule is defined.",
            "example" : "12387878"
          },
          "effectiveDate" : {
            "type" : "string",
            "description" : "Rule effective date in mm-dd-yyyy format",
            "example" : "11-01-2022"
          },
          "expiryDate" : {
            "type" : "string",
            "description" : "Rule expiration date in mm-dd-yyyy format",
            "example" : "11-01-2022"
          },
          "status" : {
            "type" : "string",
            "description" : "Current state of the rule whether Active or Expired etc.",
            "example" : "Active"
          },
          "paymentRuleType" : {
            "type" : "string",
            "description" : "Payment type associated with the rule such as ACH for Postive Pay, FEDWIRE for Drawdown, RFP for Request for Pay etc.",
            "example" : "ACH"
          }
        }
      },
      "SearchPositivePayRuleResponse" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the API request either it will be a success or a failure",
            "example" : "Success or Failure",
            "enum" : [ "Success", "Failure" ]
          },
          "code" : {
            "type" : "string",
            "description" : "Code associated with the error.",
            "example" : "PP001"
          },
          "message" : {
            "type" : "string",
            "description" : "Error message corresponding to the error code indicating the issue in API call along with the reason.",
            "example" : "Failed to get positive rules: <Reason>"
          },
          "pagination" : {
            "$ref" : "#/components/schemas/Pagination"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PositivePayRule"
            }
          }
        }
      },
      "GetPositivePayRuleUIDResponse" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the API request either it will be a success or a failure",
            "example" : "Success or Failure",
            "enum" : [ "Success", "Failure" ]
          },
          "code" : {
            "type" : "string",
            "description" : "Code associated with the error.",
            "example" : "PP001"
          },
          "message" : {
            "type" : "string",
            "description" : "Error message corresponding to the error code indicating the issue in API call along with the reason.",
            "example" : "Failed to get positive rule: <Reason>"
          },
          "data" : {
            "$ref" : "#/components/schemas/PositivePayRule"
          }
        }
      },
      "UpdatePositivePayRuleResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "This will return Success/Failed",
            "example" : "Success or Failure"
          },
          "code" : {
            "type" : "string",
            "description" : "This will indicate the error code in case of API error",
            "example" : "PP001"
          },
          "message" : {
            "type" : "string",
            "description" : "This will be the detailed error message indicating what failed and how to fix the issue",
            "example" : "Failed to update a positive rule: <Failure Reason>."
          },
          "ruleUID" : {
            "type" : "number",
            "description" : "Positive rule unique id",
            "format" : "int64",
            "example" : 123456789
          }
        }
      },
      "PostPositivePayRuleResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "This will return Success/Failed",
            "example" : "Success or Failure"
          },
          "code" : {
            "type" : "string",
            "description" : "This will indicate the error code in case of API error",
            "example" : "PP001"
          },
          "message" : {
            "type" : "string",
            "description" : "This will be the detailed error message indicating what failed and how to fix the issue",
            "example" : "Failed to add a positive rule: <Failure Reason>."
          },
          "ruleUID" : {
            "type" : "number",
            "description" : "Positive rule unique id",
            "format" : "int64",
            "example" : 123456789
          }
        }
      },
      "DeletePositivePayRuleResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "This will return Success/Failed",
            "example" : "Success or Failure"
          },
          "code" : {
            "type" : "string",
            "description" : "This will indicate the error code in case of API error",
            "example" : "PP001"
          },
          "message" : {
            "type" : "string",
            "description" : "This will be the detailed error message indicating what failed and how to fix the issue",
            "example" : "Failed to delete a positive rule: <Failure Reason>."
          },
          "ruleUID" : {
            "type" : "number",
            "description" : "Positive rule unique id",
            "format" : "int64",
            "example" : 123456789
          }
        }
      },
      "ActivatePositivePayRuleResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "This will return Success/Failed",
            "example" : "Success or Failure"
          },
          "code" : {
            "type" : "string",
            "description" : "This will indicate the error code in case of API error",
            "example" : "PP001"
          },
          "message" : {
            "type" : "string",
            "description" : "This will be the detailed error message indicating what failed and how to fix the issue",
            "example" : "Failed to activate or suspend a positive rule: <Failure Reason>."
          },
          "ruleUID" : {
            "type" : "number",
            "description" : "Positive rule unique id",
            "format" : "int64",
            "example" : 123456789
          }
        }
      },
      "PositivePayRule" : {
        "required" : [ "ruleUID" ],
        "type" : "object",
        "properties" : {
          "ruleUID" : {
            "type" : "number",
            "description" : "Positive rule unique reference id",
            "format" : "int64",
            "example" : 123456789
          },
          "paymentRuleType" : {
            "type" : "string",
            "description" : "Payment type associated with the rule such as ACH for Postive Pay, FEDWIRE for Drawdown, RFP for Request for Pay etc.",
            "example" : "ACH, FEDWIRE, RFP"
          },
          "customerName" : {
            "type" : "string",
            "description" : "Customer name associated with the payment positive rule",
            "example" : "ABC Company"
          },
          "customerAccountNumber" : {
            "type" : "string",
            "description" : "Bank Account Number",
            "example" : "12387878"
          },
          "achCompanyID" : {
            "type" : "number",
            "description" : "ACH company ID is a 10-digit identifier used by banks and Nacha, the operator of the ACH network, to identify the entity collecting payments or sending money via ACH (also referred to as an “originator”)",
            "example" : 122334789
          },
          "beneBankId" : {
            "type" : "string",
            "description" : "Bank unique id that is used to identify a specific bank",
            "example" : "12345678"
          },
          "beneName" : {
            "type" : "string",
            "description" : "A beneficiary is the person or entity that will receive the payment",
            "example" : "XYZ Name"
          },
          "beneBankName" : {
            "type" : "string",
            "description" : "Beneficiary bank name",
            "example" : "Bank Name"
          },
          "beneAccountNumber" : {
            "type" : "string",
            "description" : "A beneficiary bank account number",
            "example" : "12345678"
          },
          "amount" : {
            "type" : "number",
            "description" : "Payment amount",
            "example" : 10.0
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency Code",
            "example" : "USD",
            "default" : "USD"
          },
          "amountType" : {
            "type" : "string",
            "description" : "Type of amount associated with the postive pay rule.",
            "example" : "Exact or Maximum"
          },
          "frequency" : {
            "type" : "string",
            "description" : "Positive pay rule frequency",
            "example" : "Onetime"
          },
          "secCode" : {
            "type" : "string",
            "description" : "SEC code associated with the ACH postive rule",
            "example" : "CCD"
          },
          "status" : {
            "type" : "string",
            "description" : "Current state of the rule whether Active or Expired etc.",
            "example" : "Active"
          },
          "effectiveDate" : {
            "type" : "string",
            "description" : "Rule effective date in dd-yyyy-mm format",
            "example" : "11-2022-01"
          },
          "expiryDate" : {
            "type" : "string",
            "description" : "Rule effective date in dd-yyyy-mm format",
            "example" : "11-2022-08"
          }
        }
      },
      "AddPositivePayRule" : {
        "required" : [ "amount", "amountType", "customerAccountNumber", "effectiveDate", "frequency", "paymentRuleType" ],
        "type" : "object",
        "properties" : {
          "paymentRuleType" : {
            "type" : "string",
            "description" : "Payment type associated with the rule such as ACH for Postive Pay, FEDWIRE for Drawdown, RFP for Request for Pay etc.",
            "example" : "ACH, FEDWIRE, RFP"
          },
          "customerName" : {
            "type" : "string",
            "description" : "Customer name associated with the payment positive rule",
            "example" : "ABC Company"
          },
          "customerAccountNumber" : {
            "type" : "string",
            "description" : "Bank Account Number",
            "example" : "12387878"
          },
          "achCompanyID" : {
            "type" : "number",
            "description" : "ACH company ID is a 10-digit identifier used by banks and Nacha, the operator of the ACH network, to identify the entity collecting payments or sending money via ACH (also referred to as an “originator”)",
            "example" : 1234567899
          },
          "beneBankId" : {
            "type" : "string",
            "description" : "Bank unique id that is used to identify a specific bank",
            "example" : "12345678"
          },
          "beneName" : {
            "type" : "string",
            "description" : "A beneficiary is the person or entity that will receive the payment",
            "example" : "XYZ Name"
          },
          "beneBankName" : {
            "type" : "string",
            "description" : "Beneficiary bank name",
            "example" : "Bank Name"
          },
          "beneAccountNumber" : {
            "type" : "string",
            "description" : "A beneficiary bank account number",
            "example" : "12345678"
          },
          "amount" : {
            "type" : "number",
            "description" : "Payment amount",
            "example" : 10.0
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency Code",
            "example" : "USD"
          },
          "amountType" : {
            "type" : "string",
            "description" : "Type of amount associated with the postive pay rule.",
            "example" : "Exact or Maximum"
          },
          "frequency" : {
            "type" : "string",
            "description" : "Positive pay rule frequency",
            "example" : "Onetime"
          },
          "secCode" : {
            "type" : "string",
            "description" : "SEC code associated with the ACH postive rule. It is an optional field. If secCode is not provided in the request then the default value i.e 'ALL' will be applicable.",
            "example" : "CCD"
          },
          "effectiveDate" : {
            "type" : "string",
            "description" : "Rule effective date in mm-dd-yyyy format",
            "example" : "11-01-2022"
          },
          "expiryDate" : {
            "type" : "string",
            "description" : "Rule effective date in mm-dd-yyyy format",
            "example" : "11-01-2022"
          }
        }
      },
      "ApproveAllPositivePayExceptionRequest" : {
        "required" : [ "paymentUID" ],
        "properties" : {
          "paymentUID" : {
            "type" : "array",
            "items" : {
              "description" : "A unique identifier associated with the payment requires decision.",
              "example" : "112233,132311"
            }
          }
        }
      },
      "CreditPaymentRequest" : {
        "required" : [ "externalReferenceId", "paymentAmount", "paymentCurrency", "receiver", "sender", "speed" ],
        "properties" : {
          "externalReferenceId" : {
            "type" : "string",
            "description" : "Unique reference id set by the originator system. For the Speed associated with the Fedwire payment this will be mapped to {3320} Tag. The {3320} tag limit is 16 characters",
            "example" : "pymtref10012 or 123e4567-e89b-12d3-a456-426614174000 etc."
          },
          "paymentAmount" : {
            "type" : "number",
            "description" : "Payment amount. The payment amount are validated as per the limit set by the payment rails or by the bank for the customer. For the Fedwire payment this will be mapped to {2000} tag.The payment rail limit per transaction are RTP upto 1M$, FedNow upto $500K, Fedwire upto $9,999,999,999.99, Same Day ACH upto 1M$.",
            "format" : "double",
            "example" : 175.0
          },
          "paymentCurrency" : {
            "maxLength" : 3,
            "minLength" : 3,
            "type" : "string",
            "description" : "Receiver payment currency code. The valid country currency code should be per ISO 4217 standard.",
            "example" : "USD"
          },
          "paymentDate" : {
            "type" : "string",
            "description" : "This is an optional field. It signifies the payment date on which the Finzly system will pick up the payment to process. The payment date will be default to the current date if it is empty. The valid date format is in [MM-dd-yyyy]. User can set the payment date as current date or future date however, for the payment sets to the current date, the Finzly system may change the date based upon the bank/FI configuration for-instance, If the payment SPEED associated with the ACH [SAMEDAY/REGULAR], FEDWIRE and the last submission cutoff time is passed then the payment date will be set to the next business date, or the payment request will be rejected [as per the bank chosen behavior].",
            "example" : "07-21-2022"
          },
          "speed" : {
            "maxLength" : 20,
            "type" : "string",
            "description" : "Speed associated with the payment based on the delivery time and fee. The Speed names and associated payment rail can be configured or defined by the bank/financial institutions. The supported payment rails in FinzlyOS are ACH, Fedwire, SWIFT, RTP or FedNow. The following are the standard speed names and payment rails configured by default Economy - [ACH-REGULAR], Economy Plus [ACH-SAMEDAY], Express [FEDWIRE], Instant [FEDNOW or RTP], ON [SWIFT], TN [SWIFT], SPOT [SWIFT].",
            "example" : "Economy"
          },
          "paymentNotes" : {
            "maxLength" : 200,
            "minLength" : 1,
            "type" : "string",
            "description" : "Payment notes provided by the payment originator. These notes are passed to the payment network as per the specification such as for ACH upto 10 chars, Fedwire upto 35 chars [Tag 6400 - Beneficiary information], SWIFT upto 140 chars [Tag 70], RTP/FedNow upto 140 chars [ISO 20022 - RmtInf Tag]. The value will be truncated if it exceeds the data length limit.",
            "example" : "Payment Notes"
          },
          "sender" : {
            "$ref" : "#/components/schemas/PaymentSender"
          },
          "receiver" : {
            "$ref" : "#/components/schemas/PaymentReceiver"
          },
          "fee" : {
            "$ref" : "#/components/schemas/Fee"
          },
          "recurrence" : {
            "$ref" : "#/components/schemas/PaymentRecurrence"
          },
          "additionalInfo" : {
            "$ref" : "#/components/schemas/AdditionalInfoCreditPayment"
          }
        }
      },
      "BookTransferRequest" : {
        "required" : [ "externalReferenceId", "paymentAmount", "paymentDate", "receiverAccount", "senderAccount" ],
        "properties" : {
          "externalReferenceId" : {
            "type" : "string",
            "description" : "Unique reference id from a system outside of finzly. The external reference id can be used by the finzly for the request tracing (if needed).",
            "example" : "Payment101"
          },
          "senderAccount" : {
            "$ref" : "#/components/schemas/BookTransferSender"
          },
          "receiverAccount" : {
            "$ref" : "#/components/schemas/BookTransferReceiver"
          },
          "paymentAmount" : {
            "type" : "number",
            "description" : "Payment amount in USD you want to transfer.",
            "example" : 100.0
          },
          "paymentDate" : {
            "type" : "string",
            "description" : "Payment date in mm-dd-yyyy format.",
            "example" : "07-21-2022"
          },
          "channel" : {
            "type" : "string",
            "description" : "The channel name set by the payment origination system such as API, TELLER etc. This is an optional field and defaulted to API if it is not provided. The channel names should be defined in the Finzly system before it can be used in the API.",
            "example" : "API"
          }
        }
      },
      "BookTransferResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the API request either it will be a success or a failure",
            "example" : "Success",
            "enum" : [ "Success", "Failure" ]
          },
          "code" : {
            "type" : "string",
            "description" : "Code associated with the error.",
            "example" : "BOOKTRF001"
          },
          "message" : {
            "type" : "string",
            "description" : "Error message corresponding to the error code indicating the issue in API call along with the reason.",
            "example" : "Failed to create a book transfer payment: <Reason>"
          },
          "data" : {
            "$ref" : "#/components/schemas/BookTransferResponse_data"
          }
        }
      },
      "PaymentResponse" : {
        "properties" : {
          "status" : {
            "maxLength" : 20,
            "type" : "string",
            "description" : "Status of the API request either it will be a success or a failure",
            "example" : "Success",
            "enum" : [ "Success", "Failure" ]
          },
          "code" : {
            "maxLength" : 20,
            "type" : "string",
            "description" : "Code associated with the error.",
            "example" : "PAYMENT001"
          },
          "message" : {
            "maxLength" : 250,
            "type" : "string",
            "description" : "Error message corresponding to the error code indicating the issue in API call along with the reason.",
            "example" : "Failed to create a payment: <Reason>"
          },
          "data" : {
            "$ref" : "#/components/schemas/PaymentResponse_data"
          }
        }
      },
      "DebitPaymentRequest" : {
        "required" : [ "creditor", "debtor", "externalReferenceId", "paymentAmount", "paymentCurrency", "speed" ],
        "properties" : {
          "externalReferenceId" : {
            "type" : "string",
            "description" : "Unique reference id set by the originator system. For the speed assocated with the Fedwire payment this will be mapped to {3320} Tag. The {3320} tag limit is 16 characters",
            "example" : "pymtref10012"
          },
          "paymentAmount" : {
            "type" : "number",
            "description" : "Payment amount. The payment amount are validated as per the limit set by the payment rails or by the bank for the customer. For the Fedwire payment this will be mapped to {2000} tag.The payment rail limit per transaction are RTP upto 1M$, FedNow upto $500K, Fedwire upto $9,999,999,999.99, Same Day ACH upto 1M$.",
            "format" : "double",
            "example" : 123.0
          },
          "paymentCurrency" : {
            "maxLength" : 3,
            "minLength" : 3,
            "type" : "string",
            "description" : "Sender payment currency code. The valid country currency code should be per ISO 4217 standard.",
            "example" : "USD"
          },
          "paymentDate" : {
            "type" : "string",
            "description" : "This is an optional field. It signifies the payment date on which the Finzly system will pick up the payment to process. The payment date will be default to the current date if it is empty. The valid date format is in [MM-dd-yyyy]. User can set the payment date as current date or future date however, for the payment sets to the current date, the Finzly system may change the date based upon the bank/FI configuration for-instance, If the payment SPEED associated with the ACH [SAMEDAY/REGULAR], FEDWIRE and the last submission cutoff time is passed then the payment date will be set to the next business date, or the payment request will be rejected [as per the bank chosen behavior].",
            "example" : "07-21-2022"
          },
          "speed" : {
            "maxLength" : 20,
            "type" : "string",
            "description" : "Speed associated with the payment based on the delivery time and fee. The Speed names and associated payment rail can be configured or defined by the bank/financial institutions. The supported payment rails in FinzlyOS are ACH, Fedwire, RTP or FedNow. The following are the standard speed names and payment rails configured by default Economy - [ACH-REGULAR], Economy Plus [ACH-SAMEDAY], Express [FEDWIRE], Instant [FEDNOW or RTP].",
            "example" : "Economy"
          },
          "paymentNotes" : {
            "maxLength" : 200,
            "minLength" : 1,
            "type" : "string",
            "description" : "Payment notes provided by the payment originator. These notes are passed to the payment network as per the specification such as for ACH upto 10 chars, Fedwire upto 35 chars [Tag 6400 - Beneficiary information], SWIFT upto 140 chars [Tag 70], RTP/FedNow upto 140 chars [ISO 20022 - RmtInf Tag]. The value will be truncated if it exceeds the data length limit.",
            "default" : "Payment Notes"
          },
          "creditor" : {
            "$ref" : "#/components/schemas/PaymentCreditor"
          },
          "debtor" : {
            "$ref" : "#/components/schemas/PaymentDebtor"
          },
          "fee" : {
            "$ref" : "#/components/schemas/Fee"
          },
          "recurrence" : {
            "$ref" : "#/components/schemas/PaymentRecurrence"
          },
          "additionalInfo" : {
            "$ref" : "#/components/schemas/AdditionalInfoDebitPayment"
          }
        }
      },
      "CancelPaymentResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the API request either it will be a success or a failure",
            "example" : "Success",
            "enum" : [ "Success", "Failure" ]
          },
          "code" : {
            "type" : "string",
            "description" : "Failure code associated with the error.",
            "example" : "PAYMENT001"
          },
          "message" : {
            "type" : "string",
            "description" : "Error message corresponding to the error code indicating the issue in API call along with the reason.",
            "example" : "Failed to cancel a payment: <Reason>"
          },
          "data" : {
            "$ref" : "#/components/schemas/CancelPaymentResponse_data"
          }
        }
      },
      "ReturnPaymentRequest" : {
        "properties" : {
          "achReturnCode" : {
            "type" : "string",
            "description" : "If the payment type is ACH then the achReturnCode is mandatory and valid ACH return code such as R01,R02 etc.",
            "example" : "R01"
          },
          "returnNotes" : {
            "type" : "string",
            "description" : "If the payment type is FEDWIRE then the 'returnNotes' is mandatory.",
            "example" : "Invalid payment request."
          }
        }
      },
      "ReturnPaymentResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the API request either it will be a success or a failure",
            "example" : "Failure",
            "enum" : [ "Success", "Failure" ]
          },
          "code" : {
            "type" : "string",
            "description" : "If the status is Success then the code will be null otherwise code associated with an error.",
            "example" : "PAYMENT003"
          },
          "message" : {
            "type" : "string",
            "description" : "If the status is Success then the code will be null otherwise error message corresponding to an error code indicating the issue in API call along with the reason.",
            "example" : "Failed to return a payment: <Reason>"
          },
          "data" : {
            "$ref" : "#/components/schemas/ReturnPaymentResponse_data"
          }
        }
      },
      "ReversePaymentRequest" : {
        "properties" : {
          "reversalNotes" : {
            "type" : "string",
            "description" : "Reversal notes. It is a mandatory field"
          }
        }
      },
      "ReversePaymentResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the API request either it will be a success or a failure",
            "example" : "Success",
            "enum" : [ "Success", "Failure" ]
          },
          "code" : {
            "type" : "string",
            "description" : "If the status is Success then the code will be null otherwise code associated with an error.",
            "example" : "PAYMENT004"
          },
          "message" : {
            "type" : "string",
            "description" : "If the status is Success then the code will be null otherwise error message corresponding to an error code indicating the issue in API call along with the reason.",
            "example" : "Failed to reverse a payment: <Reason>"
          },
          "data" : {
            "$ref" : "#/components/schemas/ReturnPaymentResponse_data"
          }
        }
      },
      "GetPaymentResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the API request either it will be a success or a failure",
            "example" : "Success",
            "enum" : [ "Success", "Failure" ]
          },
          "code" : {
            "type" : "string",
            "description" : "Code associated with the error.",
            "example" : "PAYMENT00"
          },
          "message" : {
            "type" : "string",
            "description" : "Error message corresponding to the error code indicating the issue in API call along with the reason.",
            "example" : "Failed to retrieve a payment: <Reason>"
          },
          "data" : {
            "$ref" : "#/components/schemas/GetPaymentData"
          }
        }
      },
      "BulkPaymentResponse" : {
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "Error/success message indicating the issue in API call along with the reason or you will get success message with HTTP status code.",
            "example" : "<message>"
          }
        }
      },
      "BankApiResponse" : {
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "Error message corresponding to the error code indicating the issue in API call along with the reason.,",
            "example" : "<Reason>"
          },
          "routingNumber" : {
            "$ref" : "#/components/schemas/GetBankInfoData"
          }
        }
      },
      "PaymentSearchResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the API request either it will be a success or a failure",
            "example" : "Success",
            "enum" : [ "Success", "Failure" ]
          },
          "code" : {
            "type" : "string",
            "description" : "Code associated with the error.",
            "example" : "PAYMENT001"
          },
          "message" : {
            "type" : "string",
            "description" : "Error message corresponding to the error code indicating the issue in API call along with the reason.",
            "example" : "<Reason>"
          },
          "pagination" : {
            "$ref" : "#/components/schemas/Pagination"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SearchPaymentData"
            }
          }
        }
      },
      "PaymentRecurrenceSearch" : {
        "required" : [ "frequency", "payUntil" ],
        "properties" : {
          "paymentOccurrenceId" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Frequency unique identifier",
            "example" : "12898"
          },
          "amount" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Frequency payment amount",
            "example" : "10.12"
          },
          "frequency" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Frequency associated with the payment recurrence. The valid values are Daily, Weekly, BiWeekly, Monthly, Quarterly, SemiAnnually, Yearly.",
            "example" : "Daily"
          },
          "payUntil" : {
            "maxLength" : 25,
            "type" : "string",
            "description" : "The end of payment recurrence. If it is set to Cancelled that means payment will be processing as per the frequency until it cancelled. If it is set to EndDate that means payment will be processing per the frequency until the defined EndDate. If it is set to NumberOfPayments that means payment will be processing per the frequency until the defined number of payments. ",
            "example" : "Cancelled, EndDate, NumberOfPayments",
            "enum" : [ "Cancelled", "EndDate", "NumberOfPayments" ]
          },
          "startDate" : {
            "type" : "string",
            "description" : "Start Date for the recurrence.",
            "example" : "2023-06-23"
          },
          "endDate" : {
            "type" : "string",
            "description" : "End Date for the recurrence.",
            "example" : "2023-07-23"
          },
          "endNumberPayments" : {
            "maxLength" : 11,
            "type" : "integer",
            "description" : "Recurrence NumberOfPayments",
            "example" : 10
          },
          "status" : {
            "maxLength" : 50,
            "type" : "string",
            "description" : "Recurrence status",
            "example" : "Active"
          }
        },
        "description" : "Set the payment recurrence based on the available options."
      },
      "SearchPaymentData" : {
        "properties" : {
          "paymentUID" : {
            "type" : "integer",
            "description" : "The unique payment reference id assigned by the Finzly-Payment system.",
            "example" : 110289
          },
          "externalReferenceId" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Unique reference id set by the originator system.",
            "example" : "pymtref10012"
          },
          "sourceReferenceId" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Source reference id signifies the bulk file id for the payment originated via FTP.",
            "example" : "10011"
          },
          "counterParty" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Legal entity name exist in the Finzly-CRM system and associated with the payment.",
            "example" : "ABC Shipping"
          },
          "counterPartyId" : {
            "maxLength" : 11,
            "type" : "string",
            "description" : "Legal entity [CustomerUID] exist in the Finzly-CRM system and associated with the payment.",
            "example" : "10920"
          },
          "customerType" : {
            "maxLength" : 45,
            "type" : "string",
            "description" : "Customer type associated with the payment.",
            "example" : "Corporate"
          },
          "businessUnit" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Processing org name assigned to the payment.",
            "example" : "Bank Name"
          },
          "businessUnitId" : {
            "maxLength" : 11,
            "type" : "string",
            "description" : "Processing org id assigned to the payment.",
            "example" : "189"
          },
          "channel" : {
            "maxLength" : 50,
            "type" : "string",
            "description" : "The channel name set by the payment origination system such as API, TELLER etc. This is an optional field and defaulted to API if it is not provided. The channel names should be defined in the Finzly system before it can be used in the API.",
            "example" : "API"
          },
          "costCenter" : {
            "maxLength" : 50,
            "type" : "string",
            "description" : "The cost center associated with the payment. A cost center is also known as a cost pool or expense center",
            "example" : "562687"
          },
          "book" : {
            "maxLength" : 50,
            "type" : "string",
            "description" : "The book associated with the payment. The book is needed to assign proper GL accounts.",
            "example" : "ACH"
          },
          "paymentDate" : {
            "type" : "string",
            "description" : "The payment date when the payment is processed",
            "example" : "2024-04-25"
          },
          "senderAccountUID" : {
            "maxLength" : 11,
            "type" : "string",
            "description" : "Sender account unique identifier defined in the Finzly-CRM system and associated with the payment.",
            "example" : "3248"
          },
          "senderAmount" : {
            "type" : "string",
            "description" : "The sender payment amount.",
            "example" : "10"
          },
          "senderCurrency" : {
            "maxLength" : 3,
            "type" : "string",
            "description" : "Sender currency in ISO Currency Code format",
            "example" : "USD"
          },
          "receiverAmount" : {
            "type" : "number",
            "description" : "Thereceiver payment amount.",
            "example" : 10
          },
          "receiverCurrency" : {
            "maxLength" : 3,
            "type" : "string",
            "description" : "Receiver currency in ISO Currency Code format",
            "example" : "USD"
          },
          "deliveryMethod" : {
            "maxLength" : 20,
            "type" : "string",
            "description" : "One of the payment network delivery methods that includes ACH, FEDWIRE, RTP, FEDNOW, SWIFT",
            "example" : "ACH"
          },
          "paymentNotes" : {
            "maxLength" : 140,
            "type" : "string",
            "description" : "Notes associated with the payment.",
            "example" : "Payment for the invoice ABC123"
          },
          "deliveryAgentType" : {
            "type" : "string",
            "description" : "Debit account type. The possible values are Deposit, GL, Loan.",
            "example" : "Deposit"
          },
          "wireType" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Wire type associated with the payment request.",
            "example" : "OUTGOING_PAYMENT"
          },
          "senderName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of the sender linked to the payment.",
            "example" : "Sender Name"
          },
          "senderAccountNumber" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender bank account number associated with the payment.",
            "example" : "8982618"
          },
          "senderAccountName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Sender bank account name",
            "example" : "DDA Account"
          },
          "senderAddress1" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender address 1",
            "example" : "2815 Coliseum Centre Dr"
          },
          "senderAddress2" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender address 2",
            "example" : "2815 Coliseum Centre Dr"
          },
          "senderCity" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender city",
            "example" : "Charlotte"
          },
          "senderState" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender State",
            "example" : "Charlotte"
          },
          "senderZip" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Zip Code",
            "example" : "121254"
          },
          "senderCountryCode" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Country Code",
            "example" : "US"
          },
          "senderCountry" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Country Name",
            "example" : "UNITED STATES OF AMERICA"
          },
          "senderAccountType" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Account Type",
            "example" : "Deposit"
          },
          "senderBankIdType" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Bank ID type such as NID, SWIFT.",
            "example" : "NID"
          },
          "senderBankId" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Bank ID value per the senderBankIdType",
            "example" : "101206101"
          },
          "senderBankName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Sender Bank Name"
          },
          "senderBankAddress1" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Bank Address 1",
            "example" : "9019 STATE ROUTE 7"
          },
          "senderBankAddress2" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Bank Address 2"
          },
          "senderBankCity" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Bank City",
            "example" : "LEE'S SUMMIT"
          },
          "senderBankState" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Bank State",
            "example" : "MO"
          },
          "senderBankZip" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Bank Zip/Postal code",
            "example" : "64064"
          },
          "senderBankCountry" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Bank Country Name",
            "example" : "UNITED STATES OF AMERICA"
          },
          "intermediarySenderName" : {
            "maxLength" : 25,
            "type" : "string",
            "description" : "Sender Intermediary Bank Name",
            "example" : "Finzly bank"
          },
          "intermediarySenderAddress1" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Intermediary Bank Address 1",
            "example" : "119 N. MAIN ST"
          },
          "intermediarySenderAddress2" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Intermediary Bank Address 2",
            "example" : "119 N. MAIN ST"
          },
          "intermediarySenderCity" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Intermediary Bank City",
            "example" : "FAYETTE"
          },
          "intermediarySenderState" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Intermediary Bank State",
            "example" : "MO"
          },
          "intermediarySenderZip" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Intermediary Bank Zip/Postal code",
            "example" : "65248"
          },
          "intermediarySenderCountry" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Intermediary Bank Country Name",
            "example" : "UNITED STATES OF AMERICA"
          },
          "intermediarySenderId" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Intermediary Bank ID",
            "example" : "101902735"
          },
          "intermediarySenderIdType" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Intermediary Bank ID Type",
            "example" : "NID"
          },
          "ultimateSenderName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Ultimate Sender Name",
            "example" : "Ultimate Sender Name"
          },
          "ultimateSenderAccountNumber" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Sender Account Number",
            "example" : "9901020301"
          },
          "ultimateSenderAddress1" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Sender Address 1",
            "example" : "119 N. MAIN ST"
          },
          "ultimateSenderAddress2" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Sender Address 2",
            "example" : "119 N. MAIN ST"
          },
          "ultimateSenderTaxId" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Sender ACH Company ID",
            "example" : "656565"
          },
          "ultimateSenderCity" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Sender City",
            "example" : "FAYETTE"
          },
          "ultimateSenderState" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Sender State",
            "example" : "MO"
          },
          "ultimateSenderZip" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Sender Zip/Postal code",
            "example" : "653598"
          },
          "ultimateSenderCountry" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Sender Country Name",
            "example" : "UNITED STATES OF AMERICA"
          },
          "fboAccountName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "FBO account name",
            "example" : "Bank account name"
          },
          "fboAccountNumber" : {
            "maxLength" : 100,
            "type" : "string",
            "description" : "FBO account number",
            "example" : "25896565"
          },
          "fboAccountType" : {
            "maxLength" : 30,
            "type" : "string",
            "description" : "FBO account type e.g. Saving, Deposit, Loan",
            "example" : "saving"
          },
          "receiverName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Receiver name",
            "example" : "xyz"
          },
          "receiverAccountNumber" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver account number",
            "example" : "2565656"
          },
          "receiverAccountType" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver account type",
            "example" : "Deposit"
          },
          "receiverType" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Type"
          },
          "receiverAddress1" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Address 1",
            "example" : "PO BOX 27025"
          },
          "receiverAddress2" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Address 2",
            "example" : "PO BOX 27025"
          },
          "receiverCity" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver City",
            "example" : "RICHMOND"
          },
          "receiverState" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver State",
            "example" : "VA"
          },
          "receiverZip" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Zip/Postal Code",
            "example" : "235963"
          },
          "receiverCountry" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Country",
            "example" : "UNITED STATES OF AMERICA"
          },
          "receiverPhoneNumber" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Phone number",
            "example" : "789565689"
          },
          "receiverEmail" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Email",
            "example" : "abc@gmail.com"
          },
          "receiverBankIdType" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Bank ID Type such as NID, SWIFT",
            "example" : "NID"
          },
          "receiverBankId" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Bank ID value",
            "example" : "2359430"
          },
          "receiverBankName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Receiver Bank Name",
            "example" : "BANK OF AMERICA N.A"
          },
          "receiverBankAddress1" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Bank Address 1",
            "example" : "PO BOX 27025"
          },
          "receiverBankAddress2" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Bank Address 2",
            "example" : "PO BOX 27025"
          },
          "receiverBankCity" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Bank City",
            "example" : "RICHMOND"
          },
          "receiverBankState" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Bank State",
            "example" : "VA"
          },
          "receiverBankZip" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Bank Zip/Postal Code",
            "example" : "126565"
          },
          "receiverBankCountry" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Bank Country Name",
            "example" : "UNITED STATES OF AMERICA"
          },
          "intermediaryReceiverName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Intermediary Receiver Bank Name",
            "example" : "TAMPA STATE BANK"
          },
          "intermediaryReceiverAddress1" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Intermediary Receiver Bank Address 1",
            "example" : "326 MAIN"
          },
          "intermediaryReceiverAddress2" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Intermediary Receiver Bank Address 2",
            "example" : "326 MAIN"
          },
          "intermediaryReceiverCity" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Intermediary Receiver Bank City",
            "example" : "TAMPA"
          },
          "intermediaryReceiverState" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Intermediary Receiver Bank State",
            "example" : "KS"
          },
          "intermediaryReceiverZip" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Intermediary Receiver Bank Zip/Postal Code",
            "example" : "254455"
          },
          "intermediaryReceiverCountry" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Intermediary Receiver Bank Country Name",
            "example" : "UNITED STATES OF AMERICA"
          },
          "intermediaryReceiverIdType" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Intermediary Receiver Bank ID Type",
            "example" : "NID"
          },
          "intermediaryReceiverId" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Intermediary Receiver Bank ID value",
            "example" : "101110572"
          },
          "ultimateReceiverName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Ultimate Receiver Name",
            "example" : "xyz"
          },
          "ultimateReceiverAccountNumber" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Receiver Account Number",
            "example" : "89895656"
          },
          "ultimateReceiverAddress1" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Receiver Address 1",
            "example" : "sr no. 101"
          },
          "ultimateReceiverAddress2" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Receiver Address 2",
            "example" : "sr no. 1"
          },
          "ultimateReceiverTaxId" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Receiver ACH Company ID",
            "example" : "21545"
          },
          "ultimateReceiverCity" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Ultimate City",
            "example" : "TAMPA"
          },
          "ultimateReceiverState" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Receiver State",
            "example" : "KS"
          },
          "ultimateReceiverZip" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Receiver Zip/Postal Code",
            "example" : "265989"
          },
          "ultimateReceiverCountry" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Receiver Country Name",
            "example" : "UNITED STATES OF AMERICA"
          },
          "quoteId" : {
            "maxLength" : 200,
            "type" : "string",
            "description" : "FX quote associated with the SWIFT payment.",
            "example" : "248a3f96-7bb0-47a5-84b7-348f02930225"
          },
          "forexContract" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Receiver Bank Address 1",
            "example" : "9898989"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "Payment Created By",
            "example" : "System"
          },
          "creationDateTime" : {
            "type" : "string",
            "description" : "Payment Creation Date Time",
            "example" : "2023-06-23T14:56:59"
          }
        },
        "description" : "Search payments based on various parameters. This provides limited payment data in comparison with GetPayment response."
      },
      "GetBankInfoData" : {
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "Error message.",
            "example" : "Failed to fetch bank details"
          },
          "routingNumber" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/routingNumber"
            }
          },
          "deliveryMethods" : {
            "$ref" : "#/components/schemas/routingNumber"
          },
          "fedwireRoutingInfo" : {
            "$ref" : "#/components/schemas/fedwireRoutingInfo"
          },
          "rtpRoutingInfo" : {
            "$ref" : "#/components/schemas/rtpRoutingInfo"
          },
          "fedNowRoutingInfo" : {
            "$ref" : "#/components/schemas/fedNowRoutingInfo"
          }
        }
      },
      "GetPaymentData" : {
        "properties" : {
          "paymentUID" : {
            "type" : "integer",
            "description" : "The unique payment reference id assigned by the Finzly-Payment system.",
            "example" : 110289
          },
          "externalReferenceId" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Unique reference id set by the originator system.",
            "example" : "pymtref10012"
          },
          "sourceReferenceId" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Source reference id signifies the bulk file id for the payment originated via FTP.",
            "example" : "10011"
          },
          "counterParty" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Legal entity name exist in the Finzly-CRM system and associated with the payment.",
            "example" : "ABCShipping"
          },
          "counterPartyId" : {
            "maxLength" : 11,
            "type" : "string",
            "description" : "Legal entity [CustomerUID] exist in the Finzly-CRM system and associated with the payment.",
            "example" : "10920"
          },
          "customerType" : {
            "maxLength" : 45,
            "type" : "string",
            "description" : "Customer type associated with the payment.",
            "example" : "Corporate"
          },
          "businessUnit" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Processing org name assigned to the payment.",
            "example" : "BankA"
          },
          "businessUnitId" : {
            "maxLength" : 11,
            "type" : "string",
            "description" : "Processing org id assigned to the payment.",
            "example" : "189"
          },
          "channel" : {
            "maxLength" : 50,
            "type" : "string",
            "description" : "The channel name set by the payment origination system such as API, TELLER etc. This is an optional field and defaulted to API if it is not provided. The channel names should be defined in the Finzly system before it can be used in the API.",
            "example" : "API"
          },
          "costCenter" : {
            "maxLength" : 50,
            "type" : "string",
            "description" : "The cost center associated with the payment. A cost center is also known as a cost pool or expense center",
            "example" : "Global"
          },
          "book" : {
            "maxLength" : 50,
            "type" : "string",
            "description" : "The book associated with the payment. The book is needed to assign proper GL accounts.",
            "example" : "ACH"
          },
          "paymentDate" : {
            "type" : "string",
            "description" : "The payment date when the payment is processed",
            "example" : "2024-04-26"
          },
          "senderAmount" : {
            "type" : "string",
            "description" : "The sender payment amount (paid amount).",
            "example" : "100"
          },
          "senderCurrency" : {
            "maxLength" : 3,
            "type" : "string",
            "description" : "Sender currency in ISO Currency Code format.",
            "example" : "USD"
          },
          "receiverAmount" : {
            "type" : "number",
            "description" : "Thereceiver payment amount (received ammount).",
            "example" : 100
          },
          "receiverCurrency" : {
            "maxLength" : 3,
            "type" : "string",
            "description" : "Receiver currency in ISO Currency Code format.",
            "example" : "USD"
          },
          "deliveryMethod" : {
            "maxLength" : 20,
            "type" : "string",
            "description" : "One of the payment network delivery methods that includes ACH, FEDWIRE, RTP, FEDNOW, SWIFT",
            "example" : "ACH"
          },
          "paymentNotes" : {
            "maxLength" : 140,
            "type" : "string",
            "description" : "Notes associated with the payment.",
            "example" : "Payment for the invoice ABC123"
          },
          "deliveryAgentType" : {
            "type" : "string",
            "description" : "Debit account type. The possible values are Deposit, GL, MCA.",
            "example" : "DepositA"
          },
          "wireType" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Wire type associated with the payment request.",
            "example" : "OUTGOING_PAYMENT"
          },
          "senderName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Sender name associated with the payment. Which is nothing but the legal entity name",
            "example" : "FinzlyCorp"
          },
          "senderAccountNumber" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender bank account number associated with the payment.",
            "example" : "8982618"
          },
          "senderAccountName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Sender bank account name",
            "example" : "DDA Account"
          },
          "senderAddress1" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender address 1",
            "example" : "1211 My Street"
          },
          "senderAddress2" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender address 2",
            "example" : "Suite 210"
          },
          "senderCity" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender city",
            "example" : "Charlotte"
          },
          "senderState" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender State",
            "example" : "North Carolina"
          },
          "senderZip" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Zip Code",
            "example" : "28269"
          },
          "senderCountryCode" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Country Code",
            "example" : "US"
          },
          "senderCountry" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Country Name",
            "example" : "UNITED STATES OF AMERICA"
          },
          "senderAccountType" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Account Type",
            "example" : "Deposit"
          },
          "senderBankIdType" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Bank ID type such as NID, SWIFT.",
            "example" : "NID"
          },
          "senderBankId" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Bank ID value per the senderBankIdType",
            "example" : "101019615"
          },
          "senderBankName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Sender Bank Name",
            "example" : "LEAD BANK"
          },
          "senderBankAddress1" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Bank Address 1",
            "example" : "1801 MAIN ST"
          },
          "senderBankAddress2" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Bank Address 2"
          },
          "senderBankCity" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Bank City",
            "example" : "Charlotte"
          },
          "senderBankState" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Bank State",
            "example" : "North Carolina"
          },
          "senderBankZip" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Bank Zip/Postal code",
            "example" : "28269"
          },
          "senderBankCountry" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Bank Country Name",
            "example" : "UNITED STATES OF AMERICA"
          },
          "intermediarySenderName" : {
            "maxLength" : 25,
            "type" : "string",
            "description" : "Sender Intermediary Bank Name",
            "example" : "Bank Of America"
          },
          "intermediarySenderAddress1" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Intermediary Bank Address 1",
            "example" : "1801 MAIN ST"
          },
          "intermediarySenderAddress2" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Intermediary Bank Address 2"
          },
          "intermediarySenderCity" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Intermediary Bank City",
            "example" : "KANSAS CITY"
          },
          "intermediarySenderState" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Intermediary Bank State",
            "example" : "MO"
          },
          "intermediarySenderZip" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Intermediary Bank Zip/Postal code",
            "example" : "64108"
          },
          "intermediarySenderCountry" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Intermediary Bank Country Name",
            "example" : "UNITED STATES OF AMERICA"
          },
          "intermediarySenderId" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Intermediary Bank ID",
            "example" : "101019615"
          },
          "intermediarySenderIdType" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Sender Intermediary Bank ID Type. e.g. NID/SWIFT",
            "example" : "NID"
          },
          "ultimateSenderName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Ultimate Sender Name",
            "example" : "test 112266"
          },
          "ultimateSenderAccountNumber" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Sender Account Number",
            "example" : "9901020301"
          },
          "ultimateSenderAddress1" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Sender Address 1",
            "example" : "119 N. MAIN ST"
          },
          "ultimateSenderAddress2" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Sender Address 2",
            "example" : "119 N. MAIN ST"
          },
          "ultimateSenderTaxId" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Sender ACH Company ID",
            "example" : "98989898"
          },
          "ultimateSenderCity" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Sender City",
            "example" : "Charlotte"
          },
          "ultimateSenderState" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Sender State",
            "example" : "North Carolina"
          },
          "ultimateSenderZip" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Sender Zip/Postal code",
            "example" : "28269"
          },
          "ultimateSenderCountry" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Sender Country Name",
            "example" : "UNITED STATES OF AMERICA"
          },
          "fboAccountName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "FBO account name"
          },
          "fboAccountNumber" : {
            "maxLength" : 100,
            "type" : "string",
            "description" : "FBO account number which is associated with Finzly-CRM",
            "example" : "85989823"
          },
          "fboAccountType" : {
            "maxLength" : 30,
            "type" : "string",
            "description" : "FBO account type.",
            "example" : "Deposit"
          },
          "receiverName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Receiver name, the receiver information may ot may not be present in the finzly system.",
            "example" : "Pravin Ramchandra Gurav"
          },
          "receiverAccountNumber" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver account number",
            "example" : "15115"
          },
          "receiverAccountType" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver account type",
            "example" : "Deposit"
          },
          "receiverAccountSubType" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver account type",
            "example" : "Saving"
          },
          "receiverType" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Type"
          },
          "receiverAddress1" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Address 1",
            "example" : "111 My Street"
          },
          "receiverAddress2" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Address 2",
            "example" : "111 My Street"
          },
          "receiverCity" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver City",
            "example" : "Charlotte"
          },
          "receiverState" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver State",
            "example" : "North Carolina"
          },
          "receiverZip" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Zip/Postal Code",
            "example" : "28269"
          },
          "receiverCountry" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Country",
            "example" : "UNITED STATES OF AMERICA"
          },
          "receiverPhoneNumber" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Phone number",
            "example" : "9896565998"
          },
          "receiverEmail" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Email",
            "example" : "xyz@gmail.com"
          },
          "receiverBankIdType" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Bank ID Type such as NID, SWIFT",
            "example" : "NID"
          },
          "receiverBankId" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Bank ID value",
            "example" : "071212128"
          },
          "receiverBankName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Receiver Bank Name",
            "example" : "ABC Bank"
          },
          "receiverBankAddress1" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Bank Address 1",
            "example" : "11 My Street"
          },
          "receiverBankAddress2" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Bank Address 2",
            "example" : "11 My Street"
          },
          "receiverBankCity" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Bank City",
            "example" : "Charlotte"
          },
          "receiverBankState" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Bank State",
            "example" : "North Carolina"
          },
          "receiverBankZip" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Bank Zip/Postal Code",
            "example" : "28269"
          },
          "receiverBankCountry" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Bank Country Name",
            "example" : "UNITED STATES OF AMERICA"
          },
          "intermediaryReceiverIdType" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Intermediary Receiver Bank ID Type",
            "example" : "NID"
          },
          "intermediaryReceiverId" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Intermediary Receiver Bank ID value",
            "example" : "071212128"
          },
          "intermediaryReceiverName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Intermediary Receiver Bank Name",
            "example" : "ABC Bank"
          },
          "intermediaryReceiverAddress1" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Intermediary Receiver Bank Address 1",
            "example" : "111 My Street"
          },
          "intermediaryReceiverAddress2" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Intermediary Receiver Bank Address 2",
            "example" : "Suite 210"
          },
          "intermediaryReceiverCity" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Intermediary Receiver Bank City",
            "example" : "Charlotte"
          },
          "intermediaryReceiverState" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Intermediary Receiver Bank State",
            "example" : "North Carolina"
          },
          "intermediaryReceiverZip" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Intermediary Receiver Bank Zip/Postal Code",
            "example" : "28269"
          },
          "intermediaryReceiverCountry" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Intermediary Receiver Bank Country Name",
            "example" : "UNITED STATES OF AMERICA"
          },
          "ultimateReceiverName" : {
            "maxLength" : 255,
            "type" : "string",
            "description" : "Ultimate Receiver Name",
            "example" : "ABC"
          },
          "ultimateReceiverAccountNumber" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Receiver Account Number",
            "example" : "343532"
          },
          "ultimateReceiverAddress1" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Receiver Address 1",
            "example" : "11 My Street"
          },
          "ultimateReceiverAddress2" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Receiver Address 2",
            "example" : "11 My Street"
          },
          "ultimateReceiverTaxId" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Receiver ACH Company ID which is associated with the finzly-CRM.",
            "example" : "238956"
          },
          "ultimateReceiverCity" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Receiver Ultimate City",
            "example" : "Charlotte"
          },
          "ultimateReceiverState" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Receiver State",
            "example" : "North Carolina"
          },
          "ultimateReceiverZip" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Receiver Zip/Postal Code",
            "example" : "238956"
          },
          "ultimateReceiverCountry" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "Ultimate Receiver Country Name",
            "example" : "UNITED STATES OF AMERICA"
          },
          "quoteId" : {
            "maxLength" : 200,
            "type" : "string",
            "description" : "FX quote associated with the SWIFT payment.",
            "example" : "9f75ad52-7c2a-4b95-bb83-74d5e2b61b69"
          },
          "forexContract" : {
            "maxLength" : 35,
            "type" : "string",
            "description" : "FX Contract Number",
            "example" : "1325"
          },
          "fee" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Fee"
            }
          },
          "recurrence" : {
            "$ref" : "#/components/schemas/PaymentRecurrenceSearch"
          },
          "fedWireDetails" : {
            "$ref" : "#/components/schemas/fedWireDetails"
          },
          "status" : {
            "type" : "string",
            "example" : "FUTURE_DATED"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "Payment Created By",
            "example" : "System"
          },
          "creationDateTime" : {
            "type" : "string",
            "description" : "Payment Creation Date Time",
            "example" : "2023-06-23T14:56:59"
          }
        }
      },
      "RecurringPaymentRequest" : {
        "required" : [ "frequency" ],
        "type" : "object",
        "properties" : {
          "endDate" : {
            "type" : "string",
            "description" : "Recurring End Date date in MM/dd/yyyy format. End Date should not be less than the current date.The end date is mandatory when payUntil is EndDate."
          },
          "noOfPayments" : {
            "type" : "number",
            "description" : "The number of payment should be at least 1.  Number of payment is mandatory when pay until is NumberOfPayments. The value of noOfPayments should not exceed the current value of noOfPayments.",
            "example" : 10
          }
        }
      },
      "RecurringPaymentResponse" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string"
          }
        }
      },
      "files_fileType_body" : {
        "type" : "object",
        "properties" : {
          "file" : {
            "type" : "string",
            "format" : "binary"
          }
        },
        "description" : "Only csv and txt files formates are allowed."
      },
      "PaymentNoteOptionValueChildren_data" : {
        "type" : "object",
        "properties" : {
          "displayName" : {
            "type" : "string",
            "example" : "Drivers Licence"
          },
          "swiftCode" : {
            "type" : "string",
            "example" : "DVB001"
          },
          "group" : {
            "type" : "boolean",
            "example" : false
          },
          "children" : {
            "$ref" : "#/components/schemas/PaymentNoteOptionValueChildren"
          }
        }
      },
      "AdditionalInfoCreditPayment_unstructuredAddendaInfo" : {
        "type" : "object",
        "properties" : {
          "addendaLength" : {
            "type" : "integer"
          },
          "addendaInformation" : {
            "type" : "string"
          }
        },
        "description" : "This is applicable for the fedwire payment where the local instrument can be S820, GXML, ANSI, IXML, NARR, SWIF, UEDI"
      },
      "BookTransferResponse_data" : {
        "type" : "object",
        "properties" : {
          "paymentUID" : {
            "type" : "string",
            "example" : "1359899"
          },
          "paymentStatus" : {
            "type" : "string",
            "example" : "PROCESSED"
          },
          "externalReferenceId" : {
            "type" : "string",
            "example" : "87878745a78r787"
          }
        }
      },
      "PaymentResponse_data" : {
        "type" : "object",
        "properties" : {
          "paymentUID" : {
            "type" : "string",
            "description" : "The unique payment reference id assigned by the Finzly-Payment system.",
            "example" : "12930"
          },
          "paymentStatus" : {
            "type" : "string",
            "description" : "The payment status assigned by the system upon creation.",
            "example" : "INITTIATED"
          },
          "externalReferenceId" : {
            "type" : "string",
            "description" : "Returing the unique reference id provided by the originator system.",
            "example" : "123e4567"
          },
          "recurranceId" : {
            "type" : "number",
            "description" : "The unique recurrence id which is associated with the payment.",
            "example" : 5599
          }
        }
      },
      "CancelPaymentResponse_data" : {
        "type" : "object",
        "properties" : {
          "paymentUID" : {
            "type" : "string"
          }
        }
      },
      "ReturnPaymentResponse_data" : {
        "type" : "object",
        "properties" : {
          "paymentUID" : {
            "type" : "string",
            "description" : "Payment unique identifier.",
            "example" : "1235"
          }
        },
        "description" : "If the status is Failure then data will be null"
      }
    },
    "securitySchemes" : {
      "oAuth2" : {
        "type" : "oauth2",
        "description" : "Finzly Connect API uses OAuth 2.0 authcodeflow with PKCE for end user authorization or implicit grant flow for system API accounts. A support request to Finzly is required to use implicit grant flow.",
        "flows" : {
          "authorizationCode" : {
            "authorizationUrl" : "https://sandbox-security-uat.finzly.io/auth",
            "tokenUrl" : "https://sandbox-security-uat.finzly.io/auth/realms/BANKOS.UAT.SANDBOX.CUSTOMER/protocol/openid-connect/token",
            "scopes" : {
              "roles" : "manage"
            }
          }
        }
      }
    }
  }
}