{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Customer and Account API",
    "version" : "2.3.6"
  },
  "servers" : [ {
    "url" : "https://sandbox-digitalbanking-uat.finzly.io/auth/realms/{{TENANT}}/protocol/openid-connect/token",
    "description" : "FinzlyConnect Customer APIs",
    "variables" : {
      "tenant" : {
        "description" : "BankOS tenant code",
        "default" : "sandbox"
      }
    }
  } ],
  "security" : [ {
    "oAuth2" : [ "roles" ]
  } ],
  "tags" : [ {
    "name" : "Customer",
    "description" : "Customer APIs entitles the downstream partners, Banks and their associates to formally onboard clients with all the necessary information required to perform financial operations. \n\nThese API's will further help to search & maintain these onboarded clients, update any changes in client information.\n\nFollowing use cases helps you to understand the current customer capabilities exposed via APIs\n\n1. Create Customer\n2. Update Customer\n3. Search Customers\n4. Get Customer Details\n"
  }, {
    "name" : "Customer Account",
    "description" : "Customer Accounts APIs helps you to manage the accounts associated with the customer.\n\nFollowing use cases helps you to understand the current customer accounts capabilities exposed via APIs\n\n1. Create Customer Account\n2. Update Customer Account\n3. Search Customer Accounts\n4. Get Customer Account Details\n"
  }, {
    "name" : "Customer Contact",
    "description" : "Customer Contact APIs helps you to manage the customer  beneficiaries (contacts) in the finzly CRM system. \n\nOnce the contacts are defined the contact UID can be used in the payment API as a receiver [accountUID] to initiate a payment request. \n\nFollowing use cases helps you to understand the current customer contacts capabilities exposed via APIs\n\n1. Create Customer Contact\n2. Update Customer Contact\n3. Search Customer Contacts\n4. Get Customer Contact Details\n"
  }, {
    "name" : "Customer User",
    "description" : "Customer user APIs helps you to manage the users associated with the customer.\n\nFollowing use cases helps you to understand the current customer users capabilities exposed via APIs\n\n1. Create Customer User\n2. Update Customer User\n"
  }, {
    "name" : "Customer Role",
    "description" : "Customer role APIs helps you to manage the roles associated with the users.\n\nFollowing use cases helps you to understand the current customer roles capabilities exposed via APIs\n\n1. Create Customer Role\n2. Update Customer Role      \n"
  } ],
  "paths" : {
    "/v2/customers" : {
      "get" : {
        "tags" : [ "Customer" ],
        "summary" : "Search customers",
        "description" : "Search customers",
        "operationId" : "searchCustomers",
        "parameters" : [ {
          "name" : "legalName",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Full text search of full legal name"
          }
        }, {
          "name" : "customerType",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Search by type of customer such as Corporate, Consumer, Financial Institution, Downstream Partner and Processing Org"
          }
        }, {
          "name" : "shortName",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Search by Customer short name"
          }
        }, {
          "name" : "customerId",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Search by customerId"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Search by status"
          }
        }, {
          "name" : "taxId",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Search by taxId"
          }
        }, {
          "name" : "achCompanyID",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Search by ach company Id"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Which number of page of results to be returned",
            "example" : "1"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "string",
            "description" : "Total number of records to be returned for a given page",
            "example" : "100"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchCustomersResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchCustomersResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter environment"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "402" : {
            "description" : "The parameters were valid but the request failed."
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "405" : {
            "description" : "bad input parameter environment"
          },
          "409" : {
            "description" : "The request conflicts with another request (perhaps due to using the same idempotent key)."
          },
          "429" : {
            "description" : "Too many requests hit the API too quickly. We recommend an exponential backoff of your requests."
          },
          "500" : {
            "description" : "Something went wrong on back end.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      },
      "post" : {
        "tags" : [ "Customer" ],
        "summary" : "Add customer",
        "description" : "Create a customer in the BankOS CRM system",
        "operationId" : "createCustomer",
        "requestBody" : {
          "description" : "Customer details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateCustomerRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "Customer details with newly created ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateUpdateCustomerResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successfully processed request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateUpdateCustomerResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter environment"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "402" : {
            "description" : "The parameters were valid but the request failed."
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "405" : {
            "description" : "bad input parameter environment"
          },
          "409" : {
            "description" : "The request conflicts with another request (perhaps due to using the same idempotent key)."
          },
          "429" : {
            "description" : "Too many requests hit the API too quickly. We recommend an exponential backoff of your requests."
          },
          "500" : {
            "description" : "Something went wrong on back end.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v2/customers/{customerUID}" : {
      "get" : {
        "tags" : [ "Customer" ],
        "summary" : "Get customer",
        "description" : "Retrieve the customer information from the system",
        "operationId" : "getCustomerByCustomerUID",
        "parameters" : [ {
          "name" : "customerUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer unique identifier associated with the customer in the Finzly's CRM system"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomersResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/GetCustomersResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter environment"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "402" : {
            "description" : "The parameters were valid but the request failed."
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "405" : {
            "description" : "bad input parameter environment"
          },
          "409" : {
            "description" : "The request conflicts with another request (perhaps due to using the same idempotent key)."
          },
          "429" : {
            "description" : "Too many requests hit the API too quickly. We recommend an exponential backoff of your requests."
          },
          "500" : {
            "description" : "Something went wrong on back end.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      },
      "put" : {
        "tags" : [ "Customer" ],
        "summary" : "Update customer",
        "description" : "Update an existing customer information",
        "operationId" : "updateCustomerByCustomerUID",
        "parameters" : [ {
          "name" : "customerUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer unique identifier associated with the customer in the Finzly's CRM system"
          }
        } ],
        "requestBody" : {
          "description" : "Customer details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCustomerRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "Customer details with newly created ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateCustomersResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successfully processed request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateCustomersResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter environment"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "402" : {
            "description" : "The parameters were valid but the request failed."
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "405" : {
            "description" : "bad input parameter environment"
          },
          "409" : {
            "description" : "The request conflicts with another request (perhaps due to using the same idempotent key)."
          },
          "429" : {
            "description" : "Too many requests hit the API too quickly. We recommend an exponential backoff of your requests."
          },
          "500" : {
            "description" : "Something went wrong on back end.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v1/customers/{customerUID}/fees" : {
      "post" : {
        "tags" : [ "Customer" ],
        "summary" : "Add customer fee tier",
        "description" : "Add cusstomer fee tier for an existing customer",
        "operationId" : "addCustomerFeeTierByCustomerUID",
        "parameters" : [ {
          "name" : "customerUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer unique identifier associated with the customer in the Finzly's CRM system"
          }
        } ],
        "requestBody" : {
          "description" : "Customer fee tier details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddCustomerFeeTierRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "Customer fee tier id.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FeeAddAndUpdateResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successfully processed request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FeeAddAndUpdateResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter environment"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "402" : {
            "description" : "The parameters were valid but the request failed."
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "405" : {
            "description" : "bad input parameter environment"
          },
          "409" : {
            "description" : "The request conflicts with another request (perhaps due to using the same idempotent key)."
          },
          "429" : {
            "description" : "Too many requests hit the API too quickly. We recommend an exponential backoff of your requests."
          },
          "500" : {
            "description" : "Something went wrong on back end.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v1/customers/{customerUID}/fees/{feeId}" : {
      "put" : {
        "tags" : [ "Customer" ],
        "summary" : "Update customer fee tier",
        "description" : "Update cusstomer fee tier",
        "operationId" : "updateCustomerFeeTierByCustomerUID",
        "parameters" : [ {
          "name" : "customerUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer unique identifier associated with the customer in the Finzly's CRM system"
          }
        }, {
          "name" : "feeId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer feeTier unique identifier associated with the customer in the Finzly's CRM system"
          }
        } ],
        "requestBody" : {
          "description" : "Customer fee tier details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCustomerFeeTierRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "Customer fee tier id.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FeeAddAndUpdateResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successfully processed request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FeeAddAndUpdateResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter environment"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "402" : {
            "description" : "The parameters were valid but the request failed."
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "405" : {
            "description" : "bad input parameter environment"
          },
          "409" : {
            "description" : "The request conflicts with another request (perhaps due to using the same idempotent key)."
          },
          "429" : {
            "description" : "Too many requests hit the API too quickly. We recommend an exponential backoff of your requests."
          },
          "500" : {
            "description" : "Something went wrong on back end.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v2/customers/{customerUID}/accounts" : {
      "get" : {
        "tags" : [ "Customer Account" ],
        "summary" : "Search Customer Accounts",
        "description" : "Search the customer accounts for a given customer",
        "operationId" : "searchCustomerAccounts",
        "parameters" : [ {
          "name" : "customerUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer unique identifier assigned by the system"
          }
        }, {
          "name" : "accountType",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Type of account",
            "example" : "Deposit or Loan"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Status if the account",
            "example" : "Active or Closed or Suspended"
          }
        }, {
          "name" : "currency",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Currency of the account",
            "example" : "USD"
          }
        }, {
          "name" : "wireEnabled",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : true
        }, {
          "name" : "accountNumber",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : 11223345
        } ],
        "responses" : {
          "default" : {
            "description" : "Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchAccountResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchAccountResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      },
      "post" : {
        "tags" : [ "Customer Account" ],
        "summary" : "Create customer account",
        "description" : "Create a customer account",
        "operationId" : "createCustomerAccount",
        "parameters" : [ {
          "name" : "customerUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "description" : "Unique Customer Id"
          }
        } ],
        "requestBody" : {
          "description" : "Account Info",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAccountRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateAccountResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateAccountResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v2/customers/{customerUID}/accounts/{accountUID}" : {
      "get" : {
        "tags" : [ "Customer Account" ],
        "summary" : "Get customer account",
        "description" : "Retrieve an account details",
        "operationId" : "getCustomerAccountByAccountUID",
        "parameters" : [ {
          "name" : "customerUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer Id"
          }
        }, {
          "name" : "accountUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Account Id",
            "example" : "Account UID"
          }
        }, {
          "name" : "includeAccountBalance",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Pass this as true if to pull in account balance as well, false otherwise"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Which page of results are to be returned"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "string",
            "description" : "How many records are returned in the result set"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAccountResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAccountResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      },
      "put" : {
        "tags" : [ "Customer Account" ],
        "summary" : "Update customer account",
        "description" : "Update Customer Account",
        "operationId" : "updateCustomerAccountByAccountUID",
        "parameters" : [ {
          "name" : "customerUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer Id"
          }
        }, {
          "name" : "accountUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Account Id"
          }
        } ],
        "requestBody" : {
          "description" : "Account Info",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateAccountRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateAccountResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateAccountResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      },
      "delete" : {
        "tags" : [ "Customer Account" ],
        "summary" : "Delete customer account",
        "description" : "Delete Customer Account",
        "operationId" : "deleteCustomerAccountByAccountUID",
        "parameters" : [ {
          "name" : "customerUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer Id"
          }
        }, {
          "name" : "accountUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Account Id"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateAccountResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateAccountResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v2/customers/{customerUID}/contacts" : {
      "get" : {
        "tags" : [ "Customer Contact" ],
        "summary" : "Search customer contacts",
        "description" : "Search customer contacts for a given customer",
        "operationId" : "searchCustomerContacts",
        "parameters" : [ {
          "name" : "customerUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "description" : "Unique Customer Id"
          }
        }, {
          "name" : "contactName",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Contact name"
          }
        }, {
          "name" : "accountNumber",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Contact Account Number"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Which page of results are to be returned"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "string",
            "description" : "How many records are returned in the result set"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchCustomerContactResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchCustomerContactResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      },
      "post" : {
        "tags" : [ "Customer Contact" ],
        "summary" : "Create customer contact",
        "description" : "Create a new customer contact (Beneficiary)",
        "operationId" : "createCustomerContact",
        "parameters" : [ {
          "name" : "customerUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "description" : "Unique Customer Id"
          }
        } ],
        "requestBody" : {
          "description" : "Contact Info",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerContact"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateCustomerContactResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateCustomerContactResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/v2/customers/{customerUID}/contacts/{contactUID}" : {
      "get" : {
        "tags" : [ "Customer Contact" ],
        "summary" : "Get customer contact",
        "description" : "Retrieve customer contact details",
        "operationId" : "getCustomerContactByUID",
        "parameters" : [ {
          "name" : "customerUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer unique id in finzly system"
          }
        }, {
          "name" : "contactUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Contact unique id in finzly system"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerContactResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerContactResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      },
      "put" : {
        "tags" : [ "Customer Contact" ],
        "summary" : "Update customer contact",
        "description" : "Update customer contact details",
        "operationId" : "updateCustomerContactByUID",
        "parameters" : [ {
          "name" : "customerUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer unique id in finzly system"
          }
        }, {
          "name" : "contactUID",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Contact unique id in finzly system"
          }
        } ],
        "requestBody" : {
          "description" : "Contact Info",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCustomerContact"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateCustomerContactResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateCustomerContactResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/api/user-management/v1/customer/{customerId}/users" : {
      "post" : {
        "tags" : [ "Customer User" ],
        "summary" : "Create new customer user.",
        "description" : "To save customer user details in the system.",
        "operationId" : "save",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer Unique Identifier and which is associated with the token legal entity.",
            "example" : "103"
          }
        } ],
        "requestBody" : {
          "description" : "Create User Request fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerUserCreateRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "Save user details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerUserResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerUserResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/api/user-management/v1/customer/{customerId}/users/{userId}" : {
      "put" : {
        "tags" : [ "Customer User" ],
        "summary" : "Update existing customer user.",
        "description" : "To update existing customer user details in the system.",
        "operationId" : "update",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer Unique Identifier and which is associated with the token legal entity.",
            "example" : "103"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer user unique Identifier. It should be associated with the requested legal entity."
          }
        } ],
        "requestBody" : {
          "description" : "Update User Request fields",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerUserUpdateRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "Save user details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerUserUpdateRequest"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerUserResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/api/user-management/v1/customers/{customerId}/users/{userId}/suspend" : {
      "put" : {
        "tags" : [ "Customer User" ],
        "summary" : "Suspend customer user.",
        "description" : "To update customer user status.",
        "operationId" : "suspend",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer unique identifier and which is associated with the token legal entity."
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer user unique identifier. It should be associated with the requested legal entity."
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "Update user status"
          },
          "204" : {
            "description" : "The user status updated successfully."
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/api/user-management/v1/customers/{customerId}/users/{userId}/activate" : {
      "put" : {
        "tags" : [ "Customer User" ],
        "summary" : "Activate customer user.",
        "description" : "To update customer user status.",
        "operationId" : "activate",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer unique identifier and which is associated with the token legal entity."
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer user unique identifier. It should be associated with the requested legal entity."
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "Update user status"
          },
          "204" : {
            "description" : "The user status updated successfully."
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/api/user-management/v1/customers/{customerId}/users/{userId}" : {
      "get" : {
        "tags" : [ "Customer User" ],
        "summary" : "Get customer user.",
        "description" : "Get customer user details in the system.",
        "operationId" : "get-user",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer unique identifier and which is associated with the token legal entity."
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer user unique identifier. It should be associated with the requested legal entity."
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "Get user details by userId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerUserResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerUserResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/api/user-management/v1/customers/{customerId}/users//users/search" : {
      "post" : {
        "tags" : [ "Customer User" ],
        "summary" : "Search customer user.",
        "description" : "Get customer user details in the system.",
        "operationId" : "search-user",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer unique identifier and which is associated with the token legal entity."
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number",
            "description" : "page index. If page index is not provided then the default index i.e 1 will be applicable."
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number",
            "description" : "page size.If page size is not provided then the default index i.e 10 will be applicable."
          }
        } ],
        "requestBody" : {
          "description" : "Search criteria",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SearchCustomerUserRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "Get user details based upon search criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchCustomerUserResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchCustomerUserResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/api/user-management/v1/customers/{customerId}/roles/{roleId}" : {
      "get" : {
        "tags" : [ "Customer Role" ],
        "summary" : "Get customer role.",
        "description" : "Get customer role details in the system.",
        "operationId" : "get-role",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer unique identifier and which is associated with the token legal entity"
          }
        }, {
          "name" : "roleId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Role Unique Identifier."
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "Get role details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerRoleResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetCustomerRoleResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/api/user-management/v1/customers/{customerId}/roles/search" : {
      "get" : {
        "tags" : [ "Customer Role" ],
        "summary" : "Search customer role.",
        "description" : "Search customer role details in the system.",
        "operationId" : "search-role",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer unique identifier and which is associated with the token legal entity"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number",
            "description" : "page index. It is an optional attribute if it is not provided then the default value is 1.",
            "example" : 1
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number",
            "description" : "page size. It is an optional attribute if it is not provided then the default value is 10.",
            "example" : 10
          }
        }, {
          "name" : "roleName",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Role name."
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "Get role details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchCustomerRoleResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchCustomerRoleResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    },
    "/api/user-management/v1/customers/{customerId}/roles" : {
      "post" : {
        "tags" : [ "Customer Role" ],
        "summary" : "Create new customer role.",
        "description" : "To save customer role details in the system.",
        "operationId" : "save-role",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Customer unique identifier and which is associated with the token legal entity"
          }
        } ],
        "requestBody" : {
          "description" : "Customer role fileds",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerRoleCreateRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "Save user details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerRoleResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerRoleResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "You are not authorized to access the resource"
          },
          "403" : {
            "description" : "Accessing the resource you were trying to reach is forbidden"
          },
          "404" : {
            "description" : "The resource you were trying to reach is not found"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Error" : {
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Error code assigned by the system",
            "example" : "invalidMethod"
          },
          "description" : {
            "type" : "string",
            "description" : "Error description to provide additional details about the error code",
            "example" : "Invalid HTTP method used"
          }
        }
      },
      "Pagination" : {
        "properties" : {
          "totalRecords" : {
            "type" : "number",
            "description" : "Total number of records exist in the system for a given filter",
            "format" : "integer",
            "example" : 100
          },
          "returnedRecords" : {
            "type" : "number",
            "description" : "Total number of records returned",
            "format" : "integer",
            "example" : 10
          },
          "pageReturned" : {
            "type" : "number",
            "description" : "Current number of page returned",
            "format" : "integer",
            "example" : 2
          },
          "pageSize" : {
            "type" : "number",
            "description" : "Total number of records in a given pages",
            "format" : "integer",
            "example" : 10
          }
        }
      },
      "AccountExternal" : {
        "properties" : {
          "externalProvider" : {
            "type" : "string",
            "description" : "Identifier of the system of record",
            "example" : "Plaid"
          },
          "externalId" : {
            "type" : "string",
            "description" : "External account id",
            "example" : "1234567"
          },
          "externalAuthToken" : {
            "type" : "string",
            "description" : "External account auth token",
            "example" : "1234567"
          }
        }
      },
      "Groups" : {
        "type" : "object",
        "properties" : {
          "condition" : {
            "type" : "string",
            "example" : "OR"
          },
          "type" : {
            "type" : "string"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Groups"
            }
          },
          "fields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Fields"
            }
          }
        }
      },
      "Fields" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "beneficiaryBankSWIFT"
          },
          "displayName" : {
            "type" : "string",
            "example" : "Beneficiary Bank SWIFT"
          },
          "swiftCode" : {
            "type" : "string"
          },
          "swiftTag" : {
            "type" : "string"
          },
          "fieldLength" : {
            "type" : "integer"
          }
        }
      },
      "PaymentNoteOptionValueChildren" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/PaymentNoteOptionValueChildren_data"
          }
        }
      },
      "UpdateCustomerContactIntermediaryBankAddress" : {
        "properties" : {
          "addressLine1" : {
            "type" : "string",
            "description" : "Address line 1",
            "example" : "111 My Street"
          },
          "addressLine2" : {
            "type" : "string",
            "description" : "Address Line 2",
            "example" : "Suite 210"
          },
          "addressLine3" : {
            "type" : "string",
            "description" : "Address Line 3",
            "example" : "Suite 210"
          },
          "city" : {
            "type" : "string",
            "description" : "City",
            "example" : "Charlotte"
          },
          "state" : {
            "type" : "string",
            "description" : "State",
            "example" : "North Carolina"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "Postal code",
            "example" : "28269"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "ISO country code",
            "example" : "USA"
          },
          "country" : {
            "type" : "string",
            "description" : "Country name",
            "example" : "UNITED STATES OF AMERICA"
          }
        }
      },
      "CustomerContactIntermediaryBankAddress" : {
        "required" : [ "addressLine1", "city", "countryCode", "postalCode","state" ],
        "properties" : {
          "addressLine1" : {
            "type" : "string",
            "description" : "Address line 1",
            "example" : "111 My Street"
          },
          "addressLine2" : {
            "type" : "string",
            "description" : "Address Line 2",
            "example" : "Suite 210"
          },
          "addressLine3" : {
            "type" : "string",
            "description" : "Address Line 3",
            "example" : "Suite 210"
          },
          "city" : {
            "type" : "string",
            "description" : "City",
            "example" : "Charlotte"
          },
          "state" : {
            "type" : "string",
            "description" : "State",
            "example" : "North Carolina"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "Postal code",
            "example" : "28269"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "ISO country code",
            "example" : "USA"
          },
          "country" : {
            "type" : "string",
            "description" : "Country name",
            "example" : "UNITED STATES OF AMERICA"
          }
        }
      },
      "CustomerAddress" : {
        "required" : [ "addressLine1", "city", "countryCode", "postalCode" ],
        "properties" : {
          "addressLine1" : {
            "type" : "string",
            "description" : "Address line 1",
            "example" : "111 My Street"
          },
          "addressLine2" : {
            "type" : "string",
            "description" : "Address Line 2",
            "example" : "Suite 210"
          },
          "city" : {
            "type" : "string",
            "description" : "City",
            "example" : "Charlotte"
          },
          "state" : {
            "type" : "string",
            "description" : "State",
            "example" : "North Carolina"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "Postal code",
            "example" : "28269"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "ISO country code",
            "example" : "USA"
          },
          "country" : {
            "type" : "string",
            "description" : "Country name",
            "example" : "UNITED STATES OF AMERICA"
          }
        }
      },
      "UpdateCustomerAddress" : {
        "properties" : {
          "addressLine1" : {
            "type" : "string",
            "description" : "Address line 1",
            "example" : "111 My Street"
          },
          "addressLine2" : {
            "type" : "string",
            "description" : "Address Line 2",
            "example" : "Suite 210"
          },
          "city" : {
            "type" : "string",
            "description" : "City",
            "example" : "Charlotte"
          },
          "state" : {
            "type" : "string",
            "description" : "State",
            "example" : "North Carolina"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "Postal code",
            "example" : "28269"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "ISO country code",
            "example" : "USA"
          },
          "country" : {
            "type" : "string",
            "description" : "Country name",
            "example" : "UNITED STATES OF AMERICA"
          }
        }
      },
      "CustomerAppLimit" : {
        "properties" : {
          "appName" : {
            "type" : "string",
            "description" : "A vailid application name which is present in the finzly system. e.g. Payment Galaxy, Confirms",
            "example" : "Payment Galaxy"
          },
          "appLimits" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomerLimit"
            }
          }
        }
      },
      "CustomerLimit" : {
        "properties" : {
          "key" : {
            "type" : "string",
            "description" : "A valid appication limit code which is associated with the provided application name. e.g. | 1. Payment Galaxy FEDWIRE_PAYMENT_LIMIT_PER_FILE, FEDWIRE_PAYMENT_LIMIT_PER_DAY, FEDWIRE_PAYMENT_LIMIT_PER_MONTH, FEDWIRE_PAYMENT_LIMIT_PER_TRANSACTION, FEDWIRE_PAYMENT_LIMIT_PER_WEEK, INSTANT_PAYMENT_LIMIT_PER_DAY, INSTANT_PAYMENT_LIMIT_PER_FILE, INSTANT_PAYMENT_LIMIT_PER_MONTH, NO_OF_ACH_BATCHES_PER_FILE, INSTANT_PAYMENT_LIMIT_PER_TRANSACTION, INSTANT_PAYMENT_LIMIT_PER_WEEK, NO_OF_ACH_FILES_PER_DAY, NO_OF_ACH_FILES_PER_MONTH, SWIFT_PAYMENT_LIMIT_PER_MONTH, SWIFT_PAYMENT_LIMIT_PER_DAY, SWIFT_PAYMENT_LIMIT_PER_TRANSACTION, SWIFT_PAYMENT_LIMIT_PER_WEEK, ACH_PAYMENT_LIMIT_PER_TRANSACTION, ACH_POP_CREDIT_LIMIT_PER_BATCH, ACH_POP_CREDIT_TRANSACTION_LIMIT, ACH_POP_DEBIT_LIMIT_PER_BATCH, ACH_POP_DEBIT_TRANSACTION_LIMIT, ACH_PPD_CREDIT_LIMIT_PER_BATCH, ACH_PPD_CREDIT_TRANSACTION_LIMIT, ACH_PPD_DEBIT_LIMIT_PER_BATCH, ACH_PPD_DEBIT_TRANSACTION_LIMIT, ACH_WEB_CREDIT_LIMIT_PER_BATCH, ACH_WEB_CREDIT_TRANSACTION_LIMIT, ACH_WEB_DEBIT_LIMIT_PER_BATCH, ACH_WEB_DEBIT_TRANSACTION_LIMIT, ACH_WHITELIST_LIMIT 2. Confrms FX_FORWARD_LIMIT, FX_DAILY_SETTLEMENT_LIMIT",
            "example" : "FEDWIRE_PAYMENT_LIMIT_PER_DAY"
          },
          "value" : {
            "type" : "string",
            "description" : "The value should be non negative.",
            "example" : "1000"
          }
        }
      },
      "CustomerAdditonalProfileDetails" : {
        "properties" : {
          "creditClient" : {
            "type" : "boolean"
          },
          "sso" : {
            "type" : "boolean"
          },
          "billingCustomer" : {
            "type" : "boolean"
          },
          "restrictedAccess" : {
            "type" : "boolean"
          },
          "achPositivePay" : {
            "type" : "boolean"
          },
          "achWhitelist" : {
            "type" : "boolean"
          },
          "achPrefund" : {
            "type" : "boolean"
          },
          "achPrefundDebitLimit" : {
            "type" : "string",
            "example" : "100.0"
          },
          "achPrefundCreditLimit" : {
            "type" : "string",
            "example" : "100.0"
          },
          "paymentFileAuthentication" : {
            "type" : "boolean"
          },
          "detailsOfCharge" : {
            "type" : "string",
            "example" : "OUR",
            "enum" : [ "OUR", "BEN", "SHA" ]
          },
          "fxPricingTier" : {
            "type" : "string",
            "example" : "Finzly Test"
          },
          "creditValueAdjustment" : {
            "type" : "string",
            "example" : "0.00010"
          }
        }
      },
      "LegalEntityAccessSettings" : {
        "properties" : {
          "allowOnlineAccess" : {
            "type" : "boolean"
          },
          "userPinForNewEntry" : {
            "type" : "boolean"
          },
          "userDualApproval" : {
            "type" : "boolean"
          },
          "userPinForApproval" : {
            "type" : "boolean"
          },
          "notificationsDualApproval" : {
            "type" : "boolean"
          },
          "customerPinForNewEntry" : {
            "type" : "boolean"
          },
          "customerDualApproval" : {
            "type" : "boolean"
          },
          "customerPinForApproval" : {
            "type" : "boolean"
          },
          "benePinForNewEntry" : {
            "type" : "boolean"
          },
          "beneDualApproval" : {
            "type" : "boolean"
          },
          "benePinForApproval" : {
            "type" : "boolean"
          },
          "paymentPinForNewEntry" : {
            "type" : "boolean"
          },
          "paymentLimitforFirstApprover" : {
            "type" : "number"
          },
          "paymentDualApproval" : {
            "type" : "boolean"
          },
          "paymentLimitforSecondApprover" : {
            "type" : "number"
          },
          "paymentNumberOfApprovers" : {
            "type" : "number",
            "enum" : [ 0, 1, 2 ]
          },
          "paymentPinForApproval" : {
            "type" : "boolean"
          },
          "feeTierForApproval" : {
            "type" : "boolean"
          }
        }
      },
      "CreateUpdateCustomerResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "This will return Success/Failed",
            "example" : "Success"
          },
          "code" : {
            "type" : "string",
            "description" : "This will indicate the error code in case of API error",
            "example" : "CUST001"
          },
          "message" : {
            "type" : "string",
            "description" : "This will be the detailed error message indicating what failed and how to fix the issue",
            "example" : "Failed to create a customer due to the mandatory attribute <attribute-name> is not provide."
          },
          "data" : {
            "$ref" : "#/components/schemas/CreateUpdateCustomerResponse_data"
          }
        }
      },
      "CreateCustomerRequest" : {
        "required" : [ "costCenter", "customerType", "externalReferenceId", "language", "legalAddress", "legalName", "mailAddressSameAsLegal", "originatingOfficer", "relationshipManager", "shortName", "taxId" ],
        "properties" : {
          "externalReferenceId" : {
            "type" : "string",
            "description" : "Unique reference id from a system outside of finzly. The external reference id can be used by the finzly for the request tracing (if needed).",
            "example" : "REQ123"
          },
          "legalName" : {
            "type" : "string",
            "description" : "Customer's legal name",
            "example" : "ABC Bank"
          },
          "shortName" : {
            "type" : "string",
            "description" : "Customer's short name",
            "example" : "BOFA"
          },
          "customerId" : {
            "type" : "string",
            "description" : "Customer Id, this is an optional field and if it is provided then it is unique.",
            "example" : "CUST123"
          },
          "customerType" : {
            "type" : "string",
            "description" : "Type of customer",
            "example" : "Corporate",
            "enum" : [ "Corporate", "Consumer", "Financial Institution", "Downstream Partner", "Processing Org" ]
          },
          "taxId" : {
            "type" : "string",
            "description" : "Tax ID",
            "example" : "123456789"
          },
          "achCompanyID" : {
            "type" : "string",
            "description" : "ACH company ID is a 10-digit identifier used by banks and Nacha, the operator of the ACH network, to identify the entity collecting payments or sending money via ACH (also referred to as an “originator”)",
            "example" : "1234567899"
          },
          "lei" : {
            "type" : "string",
            "description" : "Legal Entity ID for accounting/tax purpose",
            "example" : "ABC1234"
          },
          "swiftCode" : {
            "type" : "string",
            "description" : "SWIFT code",
            "example" : "BOFAUS3N"
          },
          "language" : {
            "type" : "string",
            "description" : "Suported language",
            "example" : "English"
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "Customer Email Address",
            "example" : "abc@abc.com"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Customer's Phone number",
            "example" : "123-124-9877"
          },
          "faxNumber" : {
            "type" : "string",
            "description" : "Customer's phone number",
            "example" : "123-124-9877"
          },
          "webSite" : {
            "type" : "string",
            "description" : "Customer's website",
            "example" : "http://www.finzly.com"
          },
          "logoUrl" : {
            "type" : "string",
            "description" : "Customer's logo url",
            "example" : "https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_92x30dp.png"
          },
          "linkedinUrl" : {
            "type" : "string",
            "description" : "Customer's LinkedIn profile URL",
            "example" : "https://www.linkedin.com/company/finzly"
          },
          "twitterUrl" : {
            "type" : "string",
            "description" : "Customer's twitter url",
            "example" : "https://twitter.com/finzly"
          },
          "legalAddress" : {
            "$ref" : "#/components/schemas/CustomerAddress"
          },
          "mailAddressSameAsLegal" : {
            "type" : "boolean"
          },
          "mailingAddress" : {
            "$ref" : "#/components/schemas/UpdateCustomerAddress"
          },
          "relationshipType" : {
            "type" : "string",
            "description" : "Relationship Type",
            "example" : "Customer",
            "enum" : [ "customer", "bank", "thirdparty", "self" ]
          },
          "partnerOrgShortName" : {
            "type" : "string",
            "description" : "This is shortname of the partner org. This is required if the relationshipType is Third Party optional otherwise.",
            "example" : "ABC"
          },
          "costCenter" : {
            "type" : "string",
            "description" : "Cost Center code",
            "example" : "123123121"
          },
          "relationshipManager" : {
            "type" : "string",
            "description" : "Relationship manager name. It needs to be a valid user login id in the system",
            "example" : "testuser"
          },
          "originatingOfficer" : {
            "type" : "string",
            "description" : "Originating Officer name. Its needs to be a valid user login id in the system",
            "example" : "testuser"
          },
          "parentEntityShortName" : {
            "type" : "string",
            "description" : "This is shortname of the parent org",
            "example" : "ParentEntity"
          },
          "additionalProfileDetails" : {
            "$ref" : "#/components/schemas/CustomerAdditonalProfileDetails"
          },
          "secCodes" : {
            "type" : "array",
            "description" : "Provide all valid SEC-Standard Entry Class codes allowed for the given customer entity. e.g. WEB,CCD,PPD,TEL,IAT, etc..",
            "items" : {
              "type" : "string",
              "example" : "WEB"
            }
          },
          "note" : {
            "type" : "string",
            "description" : "notes",
            "example" : "Note for the LE"
          },
          "legalEntityAccessSettings" : {
            "$ref" : "#/components/schemas/LegalEntityAccessSettings"
          }
        }
      },
      "UpdateCustomerRequest" : {
        "properties" : {
          "externalReferenceId" : {
            "type" : "string",
            "description" : "Unique reference id from a system outside of finzly. The external reference id can be used by the finzly for the request tracing (if needed).",
            "example" : "REQ1231"
          },
          "legalName" : {
            "type" : "string",
            "description" : "Customer's legal name",
            "example" : "ABC Bank"
          },
          "customerId" : {
            "type" : "string",
            "description" : "Customer Id assigned by the user.",
            "example" : "CUST123"
          },
          "customerType" : {
            "type" : "string",
            "description" : "Type of customer",
            "example" : "Corporate",
            "enum" : [ "Corporate", "Consumer", "Financial Institution", "Downstream Partner", "Processing Org" ]
          },
          "taxId" : {
            "type" : "string",
            "description" : "Tax ID / TIN/SSN",
            "example" : "123456789"
          },
          "achCompanyID" : {
            "type" : "string",
            "description" : "ACH company ID is a 10-digit identifier used by banks and Nacha, the operator of the ACH network, to identify the entity collecting payments or sending money via ACH (also referred to as an “originator”)",
            "example" : "1234567899"
          },
          "lei" : {
            "type" : "string",
            "description" : "Legal Entity ID for accounting/tax purpose",
            "example" : "ABC1234"
          },
          "swiftCode" : {
            "type" : "string",
            "description" : "SWIFT code",
            "example" : "BOFAUS3N"
          },
          "language" : {
            "type" : "string",
            "description" : "Suported language",
            "example" : "English"
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "Customer Email Address",
            "example" : "abc@abc.com"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Customer's Phone number",
            "example" : "123-124-9877"
          },
          "faxNumber" : {
            "type" : "string",
            "description" : "Customer's phone number",
            "example" : "123-124-9877"
          },
          "webSite" : {
            "type" : "string",
            "description" : "Customer's website",
            "example" : "http://www.finzly.com"
          },
          "logoUrl" : {
            "type" : "string",
            "description" : "Customer's logo url",
            "example" : "https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_92x30dp.png"
          },
          "linkedinUrl" : {
            "type" : "string",
            "description" : "Customer's LinkedIn profile URL",
            "example" : "https://www.linkedin.com/company/finzly"
          },
          "twitterUrl" : {
            "type" : "string",
            "description" : "Customer's twitter url",
            "example" : "https://twitter.com/finzly"
          },
          "legalAddress" : {
            "$ref" : "#/components/schemas/UpdateCustomerAddress"
          },
          "mailAddressSameAsLegal" : {
            "type" : "boolean"
          },
          "mailingAddress" : {
            "$ref" : "#/components/schemas/UpdateCustomerAddress"
          },
          "relationshipType" : {
            "type" : "string",
            "description" : "Relationship Type",
            "example" : "Customer or Bank or ThirdParty or Self",
            "enum" : [ "customer", "bank", "thirdparty", "self" ]
          },
          "partnerOrgShortName" : {
            "type" : "string",
            "description" : "This is shortname of the partner org. This is required if the relationshipType is Third Party optional otherwise",
            "example" : "ABC"
          },
          "costCenter" : {
            "type" : "string",
            "description" : "Cost Center code",
            "example" : "123123121"
          },
          "relationshipManager" : {
            "type" : "string",
            "description" : "Relationship manager name. It needs to be a valid user login id in the system",
            "example" : "testuser"
          },
          "originatingOfficer" : {
            "type" : "string",
            "description" : "Originating Officer name. Its needs to be a valid user login id in the system",
            "example" : "testuser"
          },
          "parentEntityShortName" : {
            "type" : "string",
            "description" : "This is shortname of the parent org",
            "example" : "ParentEntity"
          },
          "additionalProfileDetails" : {
            "$ref" : "#/components/schemas/CustomerAdditonalProfileDetails"
          },
          "secCodes" : {
            "type" : "array",
            "description" : "Provide all valid SEC-Standard Entry Class codes allowed for the given customer entity",
            "items" : {
              "type" : "string",
              "example" : "WEB"
            }
          },
          "note" : {
            "type" : "string"
          },
          "legalEntityAccessSettings" : {
            "$ref" : "#/components/schemas/LegalEntityAccessSettings"
          },
          "limits" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomerAppLimit"
            }
          }
        }
      },
      "AddCustomerFeeTierRequest" : {
        "required" : [ "application", "feeTier" ],
        "properties" : {
          "application" : {
            "type" : "string",
            "description" : "A valid application name should be present in the Finzly system  and enabled for fees.\ne.g. Confirms, FX FrontOffice, Deposit, Teller, CRM, FX Trader, Foreign Exchange, Payment Galaxy, etc...",
            "example" : "Payment Galaxy"
          },
          "accountNumber" : {
            "type" : "string",
            "description" : "A valid account number should be present in the Finzly system and associated with the respective Legal Entity (LE).",
            "example" : "32265656"
          },
          "feeTier" : {
            "type" : "string",
            "description" : "A valid feeTier should be present in the Finzly system. e.g. Gold,Silver,Platinum,BEN,SHA,ON,TELLER CONSUMER ACH,TELLER CONSUMER FEDWIRE,TELLER CONSUMER SWIFT,TELLER CORPORATE ACH,TELLER CORPORATE FEDWIRE,TELLER CORPORATE SWIFT, etc ...",
            "example" : "Gold"
          }
        }
      },
      "UpdateCustomerFeeTierRequest" : {
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "A valid account number should be present in the Finzly system and associated with the respective Legal Entity (LE).",
            "example" : "32265656"
          },
          "feeTier" : {
            "type" : "string",
            "description" : "A valid feeTier should be present in the Finzly system.            e.g. Gold,Silver,Platinum,BEN,SHA,ON,TELLER CONSUMER ACH,TELLER CONSUMER FEDWIRE,TELLER CONSUMER SWIFT,TELLER CORPORATE ACH,TELLER CORPORATE FEDWIRE,TELLER CORPORATE SWIFT, etc ...",
            "example" : "Gold"
          }
        }
      },
      "FeeAddAndUpdateResponse" : {
        "properties" : {
          "id" : {
            "type" : "number",
            "description" : "Customer fee tier id.",
            "example" : 889
          }
        }
      },
      "UpdateCustomersResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the API request either it will be a success or a failure",
            "example" : "Success",
            "enum" : [ "Success", "Failure" ]
          },
          "code" : {
            "type" : "string",
            "description" : "Code associated with the error.",
            "example" : "CUST001"
          },
          "message" : {
            "type" : "string",
            "description" : "Error message corresponding to the error code indicating the issue in API call and an indication on how to resolve it.",
            "example" : "Failed to get the customer: <Reason>"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetCustomerDetailResponse"
            }
          }
        }
      },
      "GetCustomersResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the API request either it will be a success or a failure",
            "example" : "Success",
            "enum" : [ "Success", "Failure" ]
          },
          "code" : {
            "type" : "string",
            "description" : "Code associated with the error.",
            "example" : "CUST001"
          },
          "message" : {
            "type" : "string",
            "description" : "Error message corresponding to the error code indicating the issue in API call and an indication on how to resolve it.",
            "example" : "Failed to get the customer: <Reason>"
          },
          "pagination" : {
            "$ref" : "#/components/schemas/Pagination"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetCustomerDetailResponse"
            }
          }
        }
      },
      "SearchCustomersResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the API request either it will be a success or a failure",
            "example" : "Success",
            "enum" : [ "Success", "Failure" ]
          },
          "code" : {
            "type" : "string",
            "description" : "Code associated with the error.",
            "example" : "CUST001"
          },
          "message" : {
            "type" : "string",
            "description" : "Error message corresponding to the error code indicating the issue in API call and an indication on how to resolve it.",
            "example" : "Failed to get the customer: <Reason>"
          },
          "pagination" : {
            "$ref" : "#/components/schemas/Pagination"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SearchCustomerDetailResponse"
            }
          }
        }
      },
      "SearchCustomerDetailResponse" : {
        "properties" : {
          "externalReferenceId" : {
            "type" : "string",
            "description" : "Unique reference id from a system outside of finzly. The external reference id can be used by the finzly for the request tracing purpose (if needed).",
            "example" : "tran12780"
          },
          "legalName" : {
            "type" : "string",
            "description" : "Customer's legal name",
            "example" : "DEMO Bank"
          },
          "shortName" : {
            "type" : "string",
            "description" : "Customer's short name",
            "example" : "DMOB"
          },
          "customerUID" : {
            "type" : "number",
            "description" : "The unique identifier associated with the customer record assigned by the Finzly system.",
            "example" : 111222
          },
          "customerType" : {
            "type" : "string",
            "description" : "Type of the customers in the Finzly CRM system",
            "example" : "Consumer or Corporate or Downstream Partner or Processing Org or Financial Institution",
            "enum" : [ "Consumer", "Corporate", "Financial Institution", "Downstream Partner", "Processing Org" ]
          },
          "taxId" : {
            "type" : "string",
            "description" : "A tax id that the US government uses to identify business entities located in the US number.",
            "example" : "123456789"
          },
          "achCompanyID" : {
            "type" : "string",
            "description" : "ACH company ID is a 10-digit identifier used by banks and Nacha, the operator of the ACH network, to identify the entity collecting payments or sending money via ACH (also referred to as an “originator”)",
            "example" : "1234567899"
          },
          "customerId" : {
            "type" : "string",
            "description" : "Customer id assigned by the user.",
            "example" : "12347890"
          },
          "status" : {
            "type" : "string",
            "description" : "Current status of the customer.",
            "example" : "Active"
          },
          "lei" : {
            "type" : "string",
            "description" : "Legal Entity Identifier (LEI) associated with the customer",
            "example" : "ABC1234"
          },
          "swiftcode" : {
            "type" : "string",
            "description" : "SWIFT code that identifies your bank, country, location, and branch",
            "example" : "BOFAUS3N"
          },
          "language" : {
            "type" : "string",
            "description" : "language",
            "example" : "English"
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "Customer email address",
            "example" : "abc@bank.com"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Customer phone number",
            "example" : "1112223333"
          },
          "faxNumber" : {
            "type" : "string",
            "description" : "Customer fax number",
            "example" : "1231249877"
          },
          "website" : {
            "type" : "string",
            "description" : "Customer website url address",
            "example" : "http://www.bank.com"
          },
          "logoUrl" : {
            "type" : "string",
            "description" : "Customer logo url",
            "example" : "https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_92x30dp.png"
          },
          "linkedinUrl" : {
            "type" : "string",
            "description" : "Company linkedin URL",
            "example" : "https://www.linkedin.com/company/finzly"
          },
          "twitterUrl" : {
            "type" : "string",
            "description" : "Customer twitter url",
            "example" : "https://twitter.com/bank"
          },
          "legalAddress" : {
            "$ref" : "#/components/schemas/UpdateCustomerAddress"
          },
          "mailAddressSameAsLegal" : {
            "type" : "boolean"
          },
          "mailingAddress" : {
            "$ref" : "#/components/schemas/UpdateCustomerAddress"
          },
          "relationshipType" : {
            "type" : "string",
            "description" : "Relationship Type",
            "example" : "Customer or Bank or ThirdParty or Self",
            "enum" : [ "customer", "bank", "thirdparty", "self" ]
          },
          "partnerOrgShortName" : {
            "type" : "string",
            "description" : "This is the shortname associated with the customer defined in the CRM system as 'Downstream Partner'. This is required only if the customer relationshipType is Third party",
            "example" : "TESTBANK"
          },
          "processingOrgShortName" : {
            "type" : "string",
            "description" : "This is the shortname associated with the processing org the customer is associated with.",
            "example" : "POBANK"
          },
          "costCenter" : {
            "type" : "string",
            "description" : "Cost Center associated with the customer entity",
            "example" : "123123121"
          },
          "relationshipManager" : {
            "type" : "string",
            "description" : "Relationship manager name. It needs to be a valid user login id in the finzly system.",
            "example" : "testuser"
          },
          "originatingOfficer" : {
            "type" : "string",
            "description" : "Originating Officer name. Its needs to be a valid user login id in the finzly system.",
            "example" : "testuser"
          },
          "parentEntityShortName" : {
            "type" : "string",
            "description" : "This is the shortname associated with the existing customer legal entity act as a parent entity",
            "example" : "TESTBANK"
          },
          "additionalProfileDetails" : {
            "$ref" : "#/components/schemas/CustomerAdditonalProfileDetails"
          },
          "secCodes" : {
            "type" : "array",
            "description" : "Provide all valid SEC-Standard Entry Class codes allowed for the given customer entity",
            "items" : {
              "type" : "string",
              "example" : "WEB"
            }
          },
          "note" : {
            "type" : "string",
            "description" : "Free form text to leave any notes for the csutomer entity.",
            "example" : "Notes for the customer"
          },
          "legalEntityAccessSettings" : {
            "$ref" : "#/components/schemas/LegalEntityAccessSettings"
          }
        }
      },
      "GetCustomerDetailResponse" : {
        "properties" : {
          "externalReferenceId" : {
            "type" : "string",
            "description" : "Unique reference id from a system outside of finzly. The external reference id can be used by the finzly for the request tracing purpose (if needed).",
            "example" : "tran12780"
          },
          "legalName" : {
            "type" : "string",
            "description" : "Customer's legal name",
            "example" : "DEMO Bank"
          },
          "shortName" : {
            "type" : "string",
            "description" : "Customer's short name",
            "example" : "DMOB"
          },
          "customerUID" : {
            "type" : "number",
            "description" : "The unique identifier associated with the customer record assigned by the Finzly system.",
            "example" : 111222
          },
          "customerType" : {
            "type" : "string",
            "description" : "Type of the customers in the Finzly CRM system",
            "example" : "Consumer or Corporate or Downstream Partner or Processing Org or Financial Institution",
            "enum" : [ "Consumer", "Corporate", "Financial Institution", "Downstream Partner", "Processing Org" ]
          },
          "taxId" : {
            "type" : "string",
            "description" : "A tax id that the US government uses to identify business entities located in the US number.",
            "example" : "123456789"
          },
          "achCompanyID" : {
            "type" : "string",
            "description" : "ACH company ID is a 10-digit identifier used by banks and Nacha, the operator of the ACH network, to identify the entity collecting payments or sending money via ACH (also referred to as an “originator”)",
            "example" : "1234567899"
          },
          "customerId" : {
            "type" : "string",
            "description" : "Customer id assigned by the user.",
            "example" : "12347890"
          },
          "status" : {
            "type" : "string",
            "description" : "Current status of the customer.",
            "example" : "Active"
          },
          "lei" : {
            "type" : "string",
            "description" : "Legal Entity Identifier (LEI) associated with the customer",
            "example" : "ABC1234"
          },
          "swiftcode" : {
            "type" : "string",
            "description" : "SWIFT code that identifies your bank, country, location, and branch",
            "example" : "BOFAUS3N"
          },
          "language" : {
            "type" : "string",
            "description" : "language",
            "example" : "English"
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "Customer email address",
            "example" : "abc@bank.com"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Customer phone number",
            "example" : "1112223333"
          },
          "faxNumber" : {
            "type" : "string",
            "description" : "Customer fax number",
            "example" : "1231249877"
          },
          "website" : {
            "type" : "string",
            "description" : "Customer website url address",
            "example" : "http://www.bank.com"
          },
          "logoUrl" : {
            "type" : "string",
            "description" : "Customer logo url",
            "example" : "https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_92x30dp.png"
          },
          "linkedinUrl" : {
            "type" : "string",
            "description" : "Company linkedin URL",
            "example" : "https://www.linkedin.com/company/finzly"
          },
          "twitterUrl" : {
            "type" : "string",
            "description" : "Customer twitter url",
            "example" : "https://twitter.com/bank"
          },
          "legalAddress" : {
            "$ref" : "#/components/schemas/UpdateCustomerAddress"
          },
          "mailAddressSameAsLegal" : {
            "type" : "boolean"
          },
          "mailingAddress" : {
            "$ref" : "#/components/schemas/UpdateCustomerAddress"
          },
          "relationshipType" : {
            "type" : "string",
            "description" : "Relationship Type",
            "example" : "Customer or Bank or ThirdParty or Self",
            "enum" : [ "customer", "bank", "thirdparty", "self" ]
          },
          "partnerOrgShortName" : {
            "type" : "string",
            "description" : "This is the shortname associated with the customer defined in the CRM system as 'Downstream Partner'. This is required only if the customer relationshipType is Third party",
            "example" : "TESTBANK"
          },
          "processingOrgShortName" : {
            "type" : "string",
            "description" : "This is the shortname associated with the processing org the customer is associated with.",
            "example" : "POBANK"
          },
          "costCenter" : {
            "type" : "string",
            "description" : "Cost Center associated with the customer entity",
            "example" : "123123121"
          },
          "relationshipManager" : {
            "type" : "string",
            "description" : "Relationship manager name. It needs to be a valid user login id in the finzly system.",
            "example" : "testuser"
          },
          "originatingOfficer" : {
            "type" : "string",
            "description" : "Originating Officer name. Its needs to be a valid user login id in the finzly system.",
            "example" : "testuser"
          },
          "parentEntityShortName" : {
            "type" : "string",
            "description" : "This is the shortname associated with the existing customer legal entity act as a parent entity",
            "example" : "TESTBANK"
          },
          "additionalProfileDetails" : {
            "$ref" : "#/components/schemas/CustomerAdditonalProfileDetails"
          },
          "secCodes" : {
            "type" : "array",
            "description" : "Provide all valid SEC-Standard Entry Class codes allowed for the given customer entity",
            "items" : {
              "type" : "string",
              "example" : "WEB"
            }
          },
          "note" : {
            "type" : "string",
            "description" : "Free form text to leave any notes for the csutomer entity.",
            "example" : "Notes for the customer"
          },
          "legalEntityAccessSettings" : {
            "$ref" : "#/components/schemas/LegalEntityAccessSettings"
          },
          "feeTier" : {
            "$ref" : "#/components/schemas/feeTier"
          },
          "legalEntityLimits" : {
            "$ref" : "#/components/schemas/legalEntityLimits"
          }
        }
      },
      "feeTier" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Application feeTier unique id which is associated with customer.",
            "example" : "3616"
          },
          "application" : {
            "type" : "string",
            "description" : "An application name which is associated with customer and feeTier. e.g. Payment Galaxy, Confirms",
            "example" : "Confirms"
          },
          "feeTier" : {
            "type" : "string",
            "description" : "Value for the fee tier.",
            "example" : "Gold"
          },
          "accountNumber" : {
            "type" : "string",
            "description" : "Customer bank account number which is accosiated with customer and the fee tier.",
            "example" : "40000023"
          }
        }
      },
      "legalEntityLimits" : {
        "properties" : {
          "key" : {
            "type" : "string",
            "description" : "Application limit code which is associated customer.",
            "example" : "ACH_CCD_DEBIT_LIMIT_PER_BATCH"
          },
          "value" : {
            "type" : "string",
            "description" : "Application level limit which is associated customer.",
            "example" : "21"
          },
          "applicationId" : {
            "type" : "string",
            "description" : "Application unique identification number which is associated with customer.",
            "example" : "b6f342c3-e438-4d05-963e-12b144c0d467"
          },
          "applicationName" : {
            "type" : "string",
            "description" : "An application name which is associated with customer. e.g. Payment Galaxy, Confirms",
            "example" : "Payment Galaxy"
          }
        }
      },
      "UpdateAccountRequest" : {
        "properties" : {
          "externalReferenceId" : {
            "type" : "string",
            "description" : "Unique reference id from a system outside of finzly system. The external reference id can be used by the finzly for the request tracing purpose (if needed).",
            "example" : "89856556"
          },
          "accountId" : {
            "type" : "string",
            "description" : "Bank account Id. Unique identifier number which is present in the finzly system. And associayed with the legal entity.",
            "example" : "10252"
          },
          "accountType" : {
            "type" : "string",
            "description" : "Type of account",
            "example" : "Loan",
            "enum" : [ "Deposit", "Loan" ]
          },
          "accountSubType" : {
            "type" : "string",
            "description" : "Sub account type",
            "example" : "Savings",
            "enum" : [ "Checking", "Savings", "CD", "Money Market", "Pseudo", "HSA (Health Saving Account)" ]
          },
          "systemOfRecords" : {
            "type" : "string",
            "description" : "System of records.",
            "example" : "External",
            "enum" : [ "Other Core", "External", "Finzly Core" ]
          },
          "accountNumber" : {
            "type" : "string",
            "description" : "Bank account number. This an unique value in the finzly db.",
            "example" : "95659895"
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency of the account",
            "example" : "USD"
          },
          "accountName" : {
            "type" : "string",
            "description" : "Bank account name.",
            "example" : "xyz"
          },
          "masterGl" : {
            "type" : "string",
            "description" : "Master GL number."
          },
          "enableOffset" : {
            "type" : "string",
            "description" : "Enable offset account",
            "example" : "Yes",
            "enum" : [ "Yes", "No" ]
          },
          "enableWire" : {
            "type" : "string",
            "description" : "Enable or Disable for the wire transaction",
            "example" : "Yes",
            "enum" : [ "Yes", "No" ]
          },
          "defaultOffset" : {
            "type" : "string",
            "description" : "Default offset account",
            "example" : "Yes",
            "enum" : [ "Yes", "No" ]
          },
          "feeAccount" : {
            "type" : "string",
            "description" : "Whether the accountNumber is a Fee account",
            "example" : "Yes",
            "enum" : [ "Yes", "No" ]
          },
          "returnAccount" : {
            "type" : "string",
            "description" : "Whether the accountNumber is a Return account",
            "example" : "Yes",
            "enum" : [ "Yes", "No" ]
          },
          "fboAccountNumber" : {
            "type" : "string",
            "description" : "The fbo account number should be associated with legal entity.",
            "example" : "1122344"
          },
          "country" : {
            "type" : "string",
            "description" : "Country name",
            "example" : "UNITED STATES OF AMERICA"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "ISO country code",
            "example" : "US"
          },
          "routingNumber" : {
            "type" : "string",
            "description" : "Valid routing number/bankId",
            "example" : "101206101"
          }
        }
      },
      "UpdateAccountResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the API request either it will be a success or a failure",
            "example" : "Success",
            "enum" : [ "Success", "Failure" ]
          },
          "code" : {
            "type" : "string",
            "description" : "Code associated with the error.",
            "example" : "ACC001"
          },
          "message" : {
            "type" : "string",
            "description" : "Error message corresponding to the error code indicating the issue in API call and an indication on how to resolve it.",
            "example" : "Failed to update an account: <Reason>"
          },
          "data" : {
            "$ref" : "#/components/schemas/UpdateAccountResponse_data"
          }
        }
      },
      "CreateAccountRequest" : {
        "required" : [ "accountName", "accountNumber", "accountSubType", "accountType", "countryCode", "currency", "externalReferenceId", "masterGl", "routingNumber", "systemOfRecords" ],
        "properties" : {
          "externalReferenceId" : {
            "type" : "string",
            "description" : "Unique reference id from a system outside of finzly. The external reference id can be used by the finzly for the request tracing (if needed).",
            "example" : "REQ123"
          },
          "accountName" : {
            "type" : "string",
            "description" : "Name for the account",
            "example" : "xyz"
          },
          "accountNumber" : {
            "type" : "string",
            "description" : "User bank account number.",
            "example" : "2136565"
          },
          "accountType" : {
            "type" : "string",
            "description" : "Bank account type.",
            "enum" : [ "Deposit", "Loan" ]
          },
          "accountSubType" : {
            "type" : "string",
            "description" : "Bank account sub type.",
            "enum" : [ "Checking", "Savings", "CD", "Money Market", "Pseudo", "HSA (Health Saving Account)" ]
          },
          "currency" : {
            "type" : "string",
            "description" : "Account currency. Currency Code is ISO format.",
            "example" : "USD"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "ISO country code.",
            "example" : "US"
          },
          "costCenter" : {
            "type" : "string",
            "description" : "Cost Center associated with the customer entity",
            "example" : "5235666"
          },
          "enableOffset" : {
            "type" : "string",
            "description" : "Enable offset account. Possible values are 'Yes','No'",
            "example" : "Yes"
          },
          "enableWire" : {
            "type" : "string",
            "description" : "Enable or Disable for the wire transaction. The default value is 'Yes' Possible values are 'Yes','No'",
            "example" : "Yes"
          },
          "defaultOffset" : {
            "type" : "string",
            "description" : "Default offset account.Possible values are 'Yes','No'",
            "example" : "Yes"
          },
          "feeAccount" : {
            "type" : "string",
            "description" : "Whether the accountNumber is a Fee account. Possible values are 'Yes','No'",
            "example" : "Yes"
          },
          "returnAccount" : {
            "type" : "string",
            "description" : "Whether the accountNumber is a Return account. Possible values are 'Yes','No'",
            "example" : "Yes"
          },
          "fboAccountNumber" : {
            "type" : "string",
            "description" : "The fbo account number should be associated with legal entity."
          },
          "systemOfRecords" : {
            "type" : "string",
            "description" : "System of records.",
            "enum" : [ "Other Core", "External" ]
          },
          "routingNumber" : {
            "type" : "string",
            "description" : "Valid routing number/bankId",
            "example" : "101206101"
          },
          "masterGl" : {
            "type" : "string",
            "description" : "Master gl.",
            "example" : "9898965"
          },
          "reason" : {
            "type" : "string",
            "description" : "Note",
            "example" : "Notes"
          },
          "isUnderWritten" : {
            "type" : "boolean",
            "description" : "To allow UnderWritten for the account. It is an optional field. The Possible values are true/false.",
            "example" : false
          },
          "debitExposureLimit" : {
            "type" : "number",
            "description" : "Debit exposure limit",
            "example" : 1000
          },
          "creditExposureLimit" : {
            "type" : "number",
            "description" : "Credit exposure limit",
            "example" : 1000
          },
          "bankIdType" : {
            "type" : "string",
            "description" : "Bank identifier type",
            "example" : "NID",
            "enum" : [ "NID", "BIC" ]
          },
          "accountAnalysis" : {
            "type" : "boolean",
            "description" : "Account analysis. It is an optional field. The Possible values are true/false.",
            "example" : false
          },
          "callbackLimit" : {
            "type" : "number",
            "description" : "Call back limit.",
            "example" : 1000
          },
          "enableCallbacks" : {
            "type" : "boolean",
            "description" : "Enable call backs. It is an optional field. The Possible values are true/false.",
            "example" : false
          },
          "accountFeatures" : {
            "$ref" : "#/components/schemas/AccountFeatures"
          }
        }
      },
      "AccountFeatures" : {
        "properties" : {
          "rfpReceive" : {
            "type" : "boolean",
            "description" : "Rfp receive. It is an optional field. The Possible values are true/false.",
            "example" : true
          },
          "rfpSend" : {
            "type" : "boolean",
            "description" : "Rfp send. It is an optional field. The Possible values are true/false.",
            "example" : true
          }
        }
      },
      "CreateAccountResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the API request either it will be a success or a failure",
            "example" : "Success",
            "enum" : [ "Success", "Failure" ]
          },
          "code" : {
            "type" : "string",
            "description" : "Code associated with the error.",
            "example" : "ACC001"
          },
          "message" : {
            "type" : "string",
            "description" : "Error message corresponding to the error code indicating the issue in API call and an indication on how to resolve it.",
            "example" : "Failed to create an account: <Reason>"
          },
          "data" : {
            "$ref" : "#/components/schemas/CreateAccountResponse_data"
          }
        }
      },
      "SearchAccountResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the API request either it will be a success or a failure",
            "example" : "Success",
            "enum" : [ "Success", "Failure" ]
          },
          "code" : {
            "type" : "string",
            "description" : "Code associated with the error.",
            "example" : "ACC001"
          },
          "message" : {
            "type" : "string",
            "description" : "Error message corresponding to the error code indicating the issue in API call and an indication on how to resolve it.",
            "example" : "Failed to get an account: <Reason>"
          },
          "pagination" : {
            "$ref" : "#/components/schemas/Pagination"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SearchCustomerBankAccount"
            }
          }
        }
      },
      "GetAccountResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the API request either it will be a success or a failure",
            "example" : "Success",
            "enum" : [ "Success", "Failure" ]
          },
          "code" : {
            "type" : "string",
            "description" : "Code associated with the error.",
            "example" : "ACC001"
          },
          "message" : {
            "type" : "string",
            "description" : "Error message corresponding to the error code indicating the issue in API call and an indication on how to resolve it.",
            "example" : "Failed to get an account: <Reason>"
          },
          "data" : {
            "$ref" : "#/components/schemas/CustomerBankAccount"
          }
        }
      },
      "SearchCustomerBankAccount" : {
        "properties" : {
          "accountUID" : {
            "type" : "string",
            "description" : "Account unique identifier assigned by the system",
            "example" : "100100"
          },
          "accountName" : {
            "type" : "string",
            "description" : "Account Name",
            "example" : "Demo 1"
          },
          "accountNumber" : {
            "type" : "string",
            "description" : "Account Number",
            "example" : "1122345"
          },
          "fboAccountNumber" : {
            "type" : "string",
            "description" : "The fbo account number should be associated with legal entity.",
            "example" : "2233445"
          },
          "accountType" : {
            "type" : "string",
            "description" : "Account Type. e.g. DEPOSIT, LOAN",
            "example" : "DEPOSIT"
          },
          "accountSubType" : {
            "type" : "string",
            "description" : "Account Type. e.g Savings, Checking, Psuedo",
            "example" : "Checking"
          },
          "systemOfRecords" : {
            "type" : "string",
            "description" : "Identifier of the system of record. e.g Other Core,  External",
            "example" : "Other Core"
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency Code is ISO format",
            "example" : "USD"
          },
          "country" : {
            "type" : "string",
            "description" : "Country Name",
            "example" : "UNITED STATE OF AMERICA"
          },
          "routingNumber" : {
            "type" : "string",
            "description" : "Bank routing number",
            "example" : "11223498"
          },
          "bankIdType" : {
            "type" : "string",
            "description" : "Bank identifier type",
            "example" : "By ABA or By Address"
          },
          "enableWires" : {
            "type" : "boolean",
            "description" : "Wire status",
            "example" : false
          },
          "enableOffset" : {
            "type" : "boolean",
            "description" : "Whether the accountNumber is a Offset account",
            "example" : false
          },
          "defaultOffset" : {
            "type" : "boolean",
            "description" : "Default offset account",
            "example" : false
          },
          "feeAccount" : {
            "type" : "boolean",
            "description" : "Whether the accountNumber is a Fee account",
            "example" : false
          },
          "returnAccount" : {
            "type" : "boolean",
            "description" : "Whether the accountNumber is a Return account",
            "example" : false
          },
          "status" : {
            "type" : "string",
            "description" : "Account status",
            "example" : "Active"
          },
          "accountAnalysis" : {
            "type" : "boolean",
            "description" : "Account analysis status.",
            "example" : false
          },
          "callbackLimit" : {
            "type" : "number",
            "description" : "Call back limit.",
            "example" : 10000.0
          },
          "costCenter" : {
            "type" : "string",
            "description" : "Valid cost center which is associated with the legal entity.",
            "example" : "CCD"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "Valid country code.",
            "example" : "US"
          },
          "creditExposureLimit" : {
            "type" : "number",
            "description" : "Credit exposure limit. Which is applicable for the credit payments for the legal entity.",
            "example" : 5000.0
          },
          "debitExposureLimit" : {
            "type" : "number",
            "description" : "Debit exposure limit. Which is applicable for the credit payments for the legal entity.",
            "example" : 50000.0
          },
          "enableCallbacks" : {
            "type" : "boolean",
            "description" : "Flag for the call back functionality.",
            "example" : true
          },
          "isUnderWritten" : {
            "type" : "boolean",
            "description" : "Under writen.",
            "example" : true
          },
          "masterGl" : {
            "type" : "string",
            "description" : "Master GL number.",
            "example" : "5001"
          },
          "reason" : {
            "type" : "string",
            "example" : "Type here..."
          }
        }
      },
      "CustomerBankAccount" : {
        "properties" : {
          "accountUID" : {
            "type" : "string",
            "description" : "Account unique identifier assigned by the system",
            "example" : "100100"
          },
          "name" : {
            "type" : "string",
            "description" : "Account Name",
            "example" : "Checking"
          },
          "accountNumber" : {
            "type" : "string",
            "description" : "Account Number",
            "example" : "1122345"
          },
          "fboAccountNumber" : {
            "type" : "string",
            "description" : "The fbo account number should be associated with legal entity.",
            "example" : "2233445"
          },
          "type" : {
            "type" : "string",
            "description" : "Account Type",
            "example" : "DEPOSIT or LOAN"
          },
          "subType" : {
            "type" : "string",
            "description" : "Account Type",
            "example" : "Checking, Savings, Psuedo"
          },
          "systemOfRecord" : {
            "type" : "string",
            "description" : "Identifier of the system of record",
            "example" : "Other Core or External"
          },
          "balanceType" : {
            "type" : "string",
            "description" : "Account balance type in the bank core system",
            "example" : "DDA"
          },
          "ledgerBalance" : {
            "type" : "string",
            "description" : "Account ledger balance amount in the bank core system",
            "example" : "24000.00"
          },
          "availableBalance" : {
            "type" : "string",
            "description" : "Account balance amount in the bank core system",
            "example" : "25000.00"
          },
          "availableBalanceStatus" : {
            "type" : "string",
            "description" : "Account balance status in the bank core system",
            "example" : "NSF"
          },
          "amountPrecision" : {
            "type" : "string",
            "description" : "Amount amountPrecision"
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency Code is ISO format",
            "example" : "USD"
          },
          "country" : {
            "type" : "string",
            "description" : "Country Name",
            "example" : "UNITED STATE OF AMERICA"
          },
          "bankId" : {
            "type" : "string",
            "description" : "Bank routing number",
            "example" : "11223498"
          },
          "bankName" : {
            "type" : "string",
            "description" : "Name of the bank associated with the bankId",
            "example" : "Chase"
          },
          "bankIdType" : {
            "type" : "string",
            "description" : "Bank identifier type",
            "example" : "By ABA or By Address"
          },
          "enableWires" : {
            "type" : "boolean",
            "description" : "Wire status",
            "example" : false
          },
          "enableOffset" : {
            "type" : "boolean",
            "description" : "Whether the accountNumber is a Offset account",
            "example" : false
          },
          "defaultOffset" : {
            "type" : "boolean",
            "description" : "Default offset account",
            "example" : false
          },
          "feeAccount" : {
            "type" : "boolean",
            "description" : "Whether the accountNumber is a Fee account",
            "example" : false
          },
          "returnAccount" : {
            "type" : "boolean",
            "description" : "Whether the accountNumber is a Return account",
            "example" : false
          },
          "status" : {
            "type" : "string",
            "description" : "Account status",
            "example" : "Active"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "Valid country code.",
            "example" : "US"
          },
          "masterGl" : {
            "type" : "string",
            "description" : "Master GL number.",
            "example" : "5001"
          },
          "accountAnalysis" : {
            "type" : "boolean",
            "description" : "Account analysis.",
            "example" : true
          }
        }
      },
      "CustomerContact" : {
        "required" : [ "contactBank", "externalReferenceId", "name", "templateName" ],
        "properties" : {
          "externalReferenceId" : {
            "type" : "string",
            "description" : "Unique reference id from a system outside of finzly system. The external reference id can be used by the finzly for the request tracing purpose (if needed).",
            "example" : "89856556"
          },
          "templateName" : {
            "type" : "string",
            "description" : "Contact unique name.",
            "example" : "bene 1"
          },
          "name" : {
            "type" : "string",
            "description" : "Contact name.",
            "example" : "John"
          },
          "address" : {
            "$ref" : "#/components/schemas/CustomerAddress"
          },
          "email" : {
            "type" : "string",
            "description" : "Customer Email Address",
            "example" : "abc@abc.com"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Customer's Phone number",
            "example" : "123-124-9877"
          },
          "contactBank" : {
            "$ref" : "#/components/schemas/CustomerContact_contactBank"
          },
          "intermediaryBank" : {
            "$ref" : "#/components/schemas/CustomerContact_intermediaryBank"
          },
          "otherInfo" : {
            "$ref" : "#/components/schemas/CustomerContact_otherInfo"
          },
          "regulartoryReporting" : {
            "type" : "array",
            "description" : "The key for regular reporting should be configured in BankOs staticData. eg. routingNumber,social, TaxId etc...",
            "items" : {
              "$ref" : "#/components/schemas/CustomerContact_regulartoryReporting"
            }
          }
        }
      },
      "UpdateCustomerContact" : {
        "properties" : {
          "externalReferenceId" : {
            "type" : "string",
            "description" : "Unique reference id from a system outside of finzly system. The external reference id can be used by the finzly for the request tracing purpose (if needed).",
            "example" : "89856556"
          },
          "contactUID" : {
            "type" : "string",
            "description" : "Contact unique identifier.",
            "example" : "1023"
          },
          "templateName" : {
            "type" : "string",
            "description" : "Contact unique name.",
            "example" : "bene 1"
          },
          "name" : {
            "type" : "string",
            "description" : "Contact name.",
            "example" : "John"
          },
          "address" : {
            "$ref" : "#/components/schemas/UpdateCustomerAddress"
          },
          "email" : {
            "type" : "string",
            "description" : "Customer Email Address",
            "example" : "abc@abc.com"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Customer's Phone number",
            "example" : "123-124-9877"
          },
          "contactBank" : {
            "$ref" : "#/components/schemas/UpdateCustomerContact_contactBank"
          },
          "intermediaryBank" : {
            "$ref" : "#/components/schemas/UpdateCustomerContact_intermediaryBank"
          },
          "otherInfo" : {
            "$ref" : "#/components/schemas/CustomerContact_otherInfo"
          },
          "regulartoryReporting" : {
            "type" : "array",
            "description" : "The key for regular reporting should be configured in BankOs staticData. eg. routingNumber,social, TaxId etc...",
            "items" : {
              "$ref" : "#/components/schemas/CustomerContact_regulartoryReporting"
            }
          }
        }
      },
      "CreateCustomerContactResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the API request either it will be a success or a failure",
            "example" : "Success",
            "enum" : [ "Success", "Failure" ]
          },
          "code" : {
            "type" : "string",
            "description" : "Code associated with the error.",
            "example" : "CUST001"
          },
          "message" : {
            "type" : "string",
            "description" : "Error message corresponding to the error code indicating the issue in API call and an indication on how to resolve it.",
            "example" : "Failed to create a customer contact: <Reason>"
          },
          "data" : {
            "$ref" : "#/components/schemas/CreateCustomerContactResponse_data"
          }
        }
      },
      "SearchCustomerContactResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the API request either it will be a success or a failure",
            "example" : "Success",
            "enum" : [ "Success", "Failure" ]
          },
          "code" : {
            "type" : "string",
            "description" : "Code associated with the error.",
            "example" : "CUST001"
          },
          "message" : {
            "type" : "string",
            "description" : "Error message corresponding to the error code indicating the issue in API call and an indication on how to resolve it.",
            "example" : "Failed to search the customer contact: <Reason>"
          },
          "pagination" : {
            "$ref" : "#/components/schemas/Pagination"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomerContact"
            }
          }
        }
      },
      "GetCustomerContactResponse" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the API request either it will be a success or a failure",
            "example" : "Success",
            "enum" : [ "Success", "Failure" ]
          },
          "code" : {
            "type" : "string",
            "description" : "Code associated with the error.",
            "example" : "CUST001"
          },
          "message" : {
            "type" : "string",
            "description" : "Error message corresponding to the error code indicating the issue in API call and an indication on how to resolve it.",
            "example" : "Failed to get a customer contact: <Reason>"
          },
          "data" : {
            "$ref" : "#/components/schemas/CustomerContact"
          }
        }
      },
      "CustomerUserCreateRequest" : {
        "required" : [ "department", "email", "externalReferenceId", "firstName", "lastName", "loginId", "mobile", "roleNames" ],
        "properties" : {
          "externalReferenceId" : {
            "type" : "string",
            "description" : "Unique reference id from a system outside of finzly. The external reference id can be used by the finzly for the request tracing (if needed).",
            "example" : "User101"
          },
          "loginId" : {
            "type" : "string",
            "description" : "Unique identifier. Only characters, numbers and special characters are allowed.",
            "example" : "user123"
          },
          "firstName" : {
            "type" : "string",
            "description" : "User first name. Only characters are allowed.",
            "example" : "John"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of user. Only characters are allowed.",
            "example" : "Cane."
          },
          "email" : {
            "type" : "string",
            "description" : "The valid users emailId\"",
            "example" : "user123@gamil.com"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "User contact number. Only digits are allowed.",
            "example" : "9389989658"
          },
          "roleNames" : {
            "type" : "array",
            "description" : "Valid role names, which is associated with the requested legal entity.",
            "items" : {
              "type" : "string",
              "example" : "Admin"
            }
          },
          "applicationLimits" : {
            "type" : "array",
            "description" : "Application limits are optional. If it ia provided then it should be the valid and which associated with the provided roles.",
            "items" : {
              "$ref" : "#/components/schemas/Applications"
            }
          }
        }
      },
      "Applications" : {
        "required" : [ "name" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The allowed application names are \n1. Accounts\n2. Bulk_Payments\n3. Contacts\n4. Digital_Banking_Portal\n5. Foreign_Exchange\n6. Group_Payments\n7. Positive_Rules\n8. User_Admin\n9. Payments\n",
            "example" : "Accounts"
          },
          "limits" : {
            "type" : "array",
            "description" : "Limits are optional. If it is provided then it should be greater than or equals to zero. If it is not provided then no limit will be applicable.",
            "items" : {
              "$ref" : "#/components/schemas/limits"
            }
          }
        }
      },
      "limits" : {
        "required" : [ "name" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Each application has a valid limit name. The allowed limits are listed below. \n1. Foreign_Exchange - \n    i. Daily_Payment_Limits\n    \n    ii. Per_Transaction_Payment_Limits\n\n2. Payments - \n    i. Daily_Payment_Approve_Limits\n    \n    ii. Daily_Payment_Limits\n    \n    iii. Monthly_Payment_Limits\n    \n    iv. Monthly_Payment_Approve_Limits\n    \n    v. Per_Transaction_Payment_Approve_Limits\n    \n    vi. Per_Transaction_Payment_Limits\n    \n",
            "example" : "Daily_Payment_Approve_Limits"
          },
          "value" : {
            "type" : "number",
            "description" : "Limit value. In the update flow sytem will override the exsiting value.",
            "example" : 1022.23
          }
        }
      },
      "SearchCustomerUserRequest" : {
        "properties" : {
          "loginId" : {
            "type" : "string",
            "description" : "Unique identifier.",
            "example" : "user123"
          },
          "firstName" : {
            "type" : "string",
            "description" : "User first name.",
            "example" : "john"
          },
          "lastName" : {
            "type" : "string",
            "description" : "last name of user",
            "example" : "T."
          },
          "email" : {
            "type" : "string",
            "description" : "users email id",
            "example" : "user123@gamil.com"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the user",
            "example" : "Customer"
          },
          "legalEntityId" : {
            "type" : "string",
            "description" : "The legal entity associated with the user.",
            "example" : "1023"
          }
        }
      },
      "SearchCustomerRoleResponse" : {
        "properties" : {
          "totalElements" : {
            "type" : "number",
            "description" : "Total records exist in the system for the match the search criteria.",
            "example" : 1212
          },
          "totalPages" : {
            "type" : "number",
            "description" : "Total number of pages",
            "example" : 40
          },
          "size" : {
            "type" : "number",
            "description" : "Page size.",
            "example" : 50
          },
          "page" : {
            "type" : "number",
            "description" : "Page index.",
            "example" : 1
          },
          "data" : {
            "type" : "array",
            "description" : "Search results",
            "items" : {
              "$ref" : "#/components/schemas/SearchRoleResponse"
            }
          }
        }
      },
      "SearchCustomerUserResponse" : {
        "properties" : {
          "totalElements" : {
            "type" : "number",
            "description" : "Total number of users",
            "example" : 1212
          },
          "totalPages" : {
            "type" : "number",
            "description" : "Total number of pages",
            "example" : 40
          },
          "size" : {
            "type" : "number",
            "description" : "Return of records",
            "example" : 50
          },
          "page" : {
            "type" : "number",
            "description" : "Current page",
            "example" : 1
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SearchUserResponse"
            }
          }
        }
      },
      "CustomerUserUpdateRequest" : {
        "properties" : {
          "externalReferenceId" : {
            "type" : "string",
            "description" : "Unique reference id from a system outside of finzly. The external reference id can be used by the finzly for the request tracing (if needed).",
            "example" : "User101"
          },
          "firstName" : {
            "type" : "string",
            "description" : "User first name. Only characters are allowed.",
            "example" : "John"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of user. Only characters are allowed.",
            "example" : "Cane."
          },
          "email" : {
            "type" : "string",
            "description" : "The valid users emailId\"",
            "example" : "user123@gamil.com"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "User contact number. Only digits are allowed.",
            "example" : "9389989658"
          },
          "roleNames" : {
            "type" : "array",
            "description" : "Valid role names, which is associated with the requested legal entity.",
            "example" : "Admin, NewRole1"
          },
          "applicationLimits" : {
            "type" : "array",
            "description" : "Application limits are optional. If it ia provided then it should be the valid and which associated with the provided roles.",
            "items" : {
              "$ref" : "#/components/schemas/Applications"
            }
          }
        }
      },
      "CustomerUserResponse" : {
        "properties" : {
          "userId" : {
            "type" : "string",
            "example" : "f37f6757-c546-42d4-8235-5965419b495d."
          },
          "message" : {
            "type" : "string",
            "description" : "Error message indicating the issue in API call along with the reason.",
            "example" : "<Reason>"
          },
          "data" : {
            "$ref" : "#/components/schemas/CustomerUserResponse_data"
          }
        }
      },
      "CustomerRoleCreateRequest" : {
        "required" : [ "applications", "description", "externalReferenceId", "name" ],
        "properties" : {
          "externalReferenceId" : {
            "type" : "string",
            "description" : "Unique reference id from a system outside of finzly. The external reference id can be used by the finzly for the request tracing (if needed).",
            "example" : "Role101"
          },
          "name" : {
            "type" : "string",
            "description" : "A valid role name can consist of alphanumeric characters.",
            "example" : "Admin, ManagerRole1"
          },
          "description" : {
            "type" : "string",
            "description" : "Description for the role.",
            "example" : "Role for admin users"
          },
          "applications" : {
            "type" : "array",
            "description" : "Customer applications which are present in the Bank's customer app store. Minimum one application should be provided.",
            "items" : {
              "$ref" : "#/components/schemas/RoleApplication"
            }
          }
        }
      },
      "RoleApplication" : {
        "required" : [ "entitlements", "name" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The allowed application names are \n1. Accounts\n2. Bulk_Payments\n3. Contacts,\n4. Foreign_Exchange \n5. Group_Payments \n6. Positive_Rules\n7. User_Admin \n8. Payments\n9. Digital_Banking_Portal\n",
            "example" : "Accounts"
          },
          "entitlements" : {
            "type" : "array",
            "description" : "Entitlements control application access, with each app having its own set. The allowed entitlements are listed below. \n1. Accounts -\n\n    i. Manage_Account\n    \n    ii. View_Account\n    \n    \n              \n2. Bulk_Payments - \n\n    i. Approve_bulk_payments\n    \n    ii. Upload_Bulk_Payment_File\n    \n    iii. View_bulk_payments\n    \n\n3. Contacts -\n\n    i. Manage_Contacts\n    \n    ii. View_Contacts\n    \n\n4. Digital_Banking_Portal -\n\n    i. View_Portal\n\n5. Foreign_Exchange - \n\n    i. Cancel_Trades\n    \n    ii. View_Trades\n    \n    iii. Spot_Trade\n    \n    iv. Create_Instruct_Trades\n    \n\n6. Group_Payments -\n\n    i. Approve_Group\n    \n    ii. View_Group\n    \n    iii. Initiate_Cancel_Group_Payment\n    \n    iv. Manage_Group\n    \n\n7. Payments -\n\n    i. Reversal_Payments\n    \n    ii. View_Payments\n    \n    iii. Return_Payments\n    \n    iv. Cancel_Payments\n    \n    v. Initiate_Payments\n    \n    vi. Approve_Payments\n    \n\n8. Positive_Rules - \n\n    i. Manage_Exception\n    \n    ii. View_Positive_Rules\n    \n    iii. Manage_Positive_Rules\n    \n\n9.  User_Admin - \n\n    i. View_Roles_And_Users\n    \n    ii. Manage_Roles\n    \n    iii. Manage_Users\n    \n    iv. Activate_Users\n    \n    v. View_Category\n    \n    vi. Add_Update_Delete_Category\n    \n    vii. Suspend_Users\n    \n",
            "items" : {
              "type" : "string",
              "example" : "Manage_Account,  View_Account"
            }
          },
          "limits" : {
            "type" : "array",
            "description" : "Application limits are optional.",
            "items" : {
              "$ref" : "#/components/schemas/limits"
            }
          }
        }
      },
      "CustomerRoleResponse" : {
        "properties" : {
          "roleId" : {
            "type" : "string",
            "description" : "Newly role UUID",
            "example" : "123fdhsfh47834jsdh84754"
          },
          "message" : {
            "type" : "string",
            "description" : "Error message indicating the issue in API call along with the reason.",
            "example" : "<Reason>"
          },
          "data" : {
            "type" : "object"
          }
        }
      },
      "SearchUserResponse" : {
        "properties" : {
          "externalReferenceId" : {
            "type" : "string",
            "description" : "Unique reference id from a system outside of finzly. The external reference id can be used by the finzly for the request tracing (if needed). ",
            "example" : "89856556"
          },
          "loginId" : {
            "type" : "string",
            "description" : "Unique identifier.",
            "example" : "user123"
          },
          "firstName" : {
            "type" : "string",
            "description" : "User first name.",
            "example" : "john"
          },
          "lastName" : {
            "type" : "string",
            "description" : "last name of user.",
            "example" : "T"
          },
          "email" : {
            "type" : "string",
            "description" : "users email id.",
            "example" : "user123@gamil.com"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "User contact number.",
            "example" : "9389989658"
          },
          "status" : {
            "type" : "string",
            "description" : "User current status in the system.",
            "example" : "Active"
          },
          "shortName" : {
            "type" : "string",
            "description" : "Legal entity short name which is associated with the user.",
            "example" : "CORP1"
          }
        }
      },
      "GetCustomerUserResponse" : {
        "properties" : {
          "userId" : {
            "type" : "string",
            "description" : "User unique identifer.",
            "example" : "f945bc67-c44b-4f88-91d9-d09434e4dd37"
          },
          "loginId" : {
            "type" : "string",
            "description" : "Unique identifier.",
            "example" : "user123"
          },
          "firstName" : {
            "type" : "string",
            "description" : "User first name.",
            "example" : "john"
          },
          "lastName" : {
            "type" : "string",
            "description" : "last name of user.",
            "example" : "T"
          },
          "email" : {
            "type" : "string",
            "description" : "users email id.",
            "example" : "user123@gamil.com"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "User contact number.",
            "example" : "9389989658"
          },
          "status" : {
            "type" : "string",
            "description" : "User current status in the system.",
            "example" : "Active"
          },
          "shortName" : {
            "type" : "string",
            "description" : "Legal entity short name which is associated with the user.",
            "example" : "CORP1"
          },
          "roleNames" : {
            "type" : "array",
            "description" : "Unique identifier.",
            "items" : {
              "type" : "string",
              "example" : "Admin"
            }
          },
          "limits" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/limits"
            }
          }
        }
      },
      "SearchRoleResponse" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Role id.",
            "example" : "f37f6757-c546-42d4-8235-5965419b495d."
          },
          "name" : {
            "type" : "string",
            "description" : "Role name.",
            "example" : "adminRole."
          },
          "description" : {
            "type" : "string",
            "description" : "Role description.",
            "example" : "Role description."
          },
          "leId" : {
            "type" : "number",
            "description" : "Customer id  associated with role.",
            "example" : 11950.0
          },
          "status" : {
            "type" : "string",
            "description" : "Status of role.",
            "example" : "Active"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the role. e.g. Bank, customer",
            "example" : "CUSTOMER"
          },
          "owner" : {
            "type" : "string",
            "description" : "The owner of this role will indicate who created it.",
            "example" : "Bank, Customer"
          }
        }
      },
      "GetCustomerRoleResponse" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Role id.",
            "example" : "f37f6757-c546-42d4-8235-5965419b495d."
          },
          "name" : {
            "type" : "string",
            "description" : "Role name.",
            "example" : "adminRole."
          },
          "description" : {
            "type" : "string",
            "description" : "Role description.",
            "example" : "Role description."
          },
          "leId" : {
            "type" : "number",
            "description" : "Customer id  associated with role.",
            "example" : 11950.0
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the role. e.g. Bank, customer",
            "example" : "CUSTOMER"
          },
          "status" : {
            "type" : "string",
            "description" : "Status of role.",
            "example" : "Active"
          },
          "owner" : {
            "type" : "string",
            "description" : "The owner of this role will indicate who created it.",
            "example" : "Bank, Customer"
          },
          "applications" : {
            "$ref" : "#/components/schemas/RoleApplication"
          }
        }
      },
      "PaymentNoteOptionValueChildren_data" : {
        "type" : "object",
        "properties" : {
          "displayName" : {
            "type" : "string",
            "example" : "Drivers Licence"
          },
          "swiftCode" : {
            "type" : "string",
            "example" : "DVB001"
          },
          "group" : {
            "type" : "boolean",
            "example" : false
          },
          "children" : {
            "$ref" : "#/components/schemas/PaymentNoteOptionValueChildren"
          }
        }
      },
      "CreateUpdateCustomerResponse_data" : {
        "type" : "object",
        "properties" : {
          "customerUID" : {
            "type" : "string",
            "description" : "Customer id within Finzly's CRM system",
            "example" : "123"
          },
          "externalReferenceId" : {
            "type" : "string",
            "example" : "89895487eyr878"
          },
          "shortName" : {
            "type" : "string",
            "example" : "ACBCORP"
          },
          "customerEntityStatus" : {
            "type" : "string",
            "description" : "Status of the customer",
            "example" : "New"
          }
        }
      },
      "UpdateAccountResponse_data" : {
        "type" : "object",
        "properties" : {
          "accountUID" : {
            "type" : "string",
            "description" : "Account unique identifier assigned by the system"
          },
          "externalReferenceId" : {
            "type" : "string",
            "example" : "89856556"
          }
        }
      },
      "CreateAccountResponse_data" : {
        "type" : "object",
        "properties" : {
          "accountUID" : {
            "type" : "string"
          },
          "externalReferenceId" : {
            "type" : "string",
            "example" : "89856556"
          }
        }
      },
      "CustomerContact_contactBank" : {
        "required" : [ "accountCcy", "accountNo", "country", "name" ],
        "type" : "object",
        "properties" : {
          "country" : {
            "type" : "string",
            "description" : "Country name",
            "example" : "UNITED STATES OF AMERICA"
          },
          "accountNo" : {
            "type" : "string",
            "description" : "Account Number",
            "example" : "98989898"
          },
          "accountCcy" : {
            "type" : "string",
            "description" : "Account currency. Currency Code is ISO format.",
            "example" : "USD"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the bank.",
            "example" : "Banka"
          },
          "address" : {
            "$ref" : "#/components/schemas/CustomerContactIntermediaryBankAddress"
          },
          "nationalCode" : {
            "type" : "string",
            "description" : "National code that identifies your bank, country, location, and branch. Either swiftCode or nationalCode is needed.",
            "example" : "0125487"
          },
          "swiftCode" : {
            "type" : "string",
            "description" : "SWIFT code that identifies your bank, country, location, and branch. Either swiftCode or nationalCode is needed.",
            "example" : "USBNX000"
          }
        }
      },
      "CustomerContact_intermediaryBank" : {
        "type" : "object",
        "properties" : {
          "country" : {
            "type" : "string",
            "description" : "Country name",
            "example" : "UNITED STATES OF AMERICA"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the intermediary bank.",
            "example" : "Banka"
          },
          "nationalCode" : {
            "type" : "string",
            "description" : "National code that identifies your bank, country, location, and branch. Either swiftCode or nationalCode is needed.",
            "example" : "0125487"
          },
          "swiftCode" : {
            "type" : "string",
            "description" : "SWIFT code that identifies your bank, country, location, and branch. Either swiftCode or nationalCode is needed.",
            "example" : "USBNX000"
          },
          "coverMessageRequired" : {
            "type" : "boolean",
            "example" : true
          },
          "address" : {
            "$ref" : "#/components/schemas/CustomerContactIntermediaryBankAddress"
          }
        }
      },
      "CustomerContact_otherInfo" : {
        "type" : "object",
        "properties" : {
          "beneNotes" : {
            "type" : "string",
            "description" : "Bene note",
            "example" : "Type something....."
          },
          "otherBeneBankInfo" : {
            "type" : "string",
            "description" : "Other bene bank info.",
            "example" : "bank info."
          }
        }
      },
      "CustomerContact_regulartoryReporting" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string",
            "example" : "routingNumber"
          },
          "value" : {
            "type" : "string",
            "example" : "4545"
          }
        }
      },
      "UpdateCustomerContact_contactBank" : {
        "type" : "object",
        "properties" : {
          "country" : {
            "type" : "string",
            "description" : "Country name",
            "example" : "UNITED STATES OF AMERICA"
          },
          "accountNo" : {
            "type" : "string",
            "description" : "Account Number",
            "example" : "98989898"
          },
          "accountCcy" : {
            "type" : "string",
            "description" : "Account currency. Currency Code is ISO format.",
            "example" : "USD"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the bank.",
            "example" : "Banka"
          },
          "address" : {
            "$ref" : "#/components/schemas/UpdateCustomerAddress"
          },
          "nationalCode" : {
            "type" : "string",
            "description" : "National code that identifies your bank, country, location, and branch. Either swiftCode or nationalCode is needed.",
            "example" : "0125487"
          },
          "swiftCode" : {
            "type" : "string",
            "description" : "SWIFT code that identifies your bank, country, location, and branch. Either swiftCode or nationalCode is needed.",
            "example" : "USBNX000"
          }
        }
      },
      "UpdateCustomerContact_intermediaryBank" : {
        "type" : "object",
        "properties" : {
          "country" : {
            "type" : "string",
            "description" : "Country name",
            "example" : "UNITED STATES OF AMERICA"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the intermediary bank.",
            "example" : "Banka"
          },
          "nationalCode" : {
            "type" : "string",
            "description" : "National code that identifies your bank, country, location, and branch. Either swiftCode or nationalCode is needed.",
            "example" : "0125487"
          },
          "swiftCode" : {
            "type" : "string",
            "description" : "SWIFT code that identifies your bank, country, location, and branch. Either swiftCode or nationalCode is needed.",
            "example" : "USBNX000"
          },
          "coverMessageRequired" : {
            "type" : "boolean",
            "example" : true
          },
          "address" : {
            "$ref" : "#/components/schemas/UpdateCustomerContactIntermediaryBankAddress"
          }
        }
      },
      "CreateCustomerContactResponse_data" : {
        "type" : "object",
        "properties" : {
          "customerContactUID" : {
            "type" : "string",
            "description" : "Customer contact unique identifier created by the system."
          },
          "externalReferenceId" : {
            "type" : "string",
            "description" : "External reference id received in the request.",
            "example" : "89856556"
          }
        }
      },
      "CustomerUserResponse_data" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string",
            "description" : "Newly created user id.",
            "example" : "f37f6757-c546-42d4-8235-5965419b495d."
          }
        }
      }
    },
    "securitySchemes" : {
      "oAuth2" : {
        "type" : "oauth2",
        "description" : "BankOS OpenBanking API uses OAuth 2.0 authcodeflow with PKCE for end user authorization or implicit grant flow for system API accounts. A support request to Finzly is required to use implicit grant flow.",
        "flows" : {
          "authorizationCode" : {
            "authorizationUrl" : "https://sandbox-security-uat.finzly.io/auth",
            "tokenUrl" : "https://sandbox-security-uat.finzly.io/auth/realms/BANKOS.UAT.SANDBOX.CUSTOMER/protocol/openid-connect/token",
            "scopes" : {
              "roles" : "manage"
            }
          }
        }
      }
    }
  }
}
